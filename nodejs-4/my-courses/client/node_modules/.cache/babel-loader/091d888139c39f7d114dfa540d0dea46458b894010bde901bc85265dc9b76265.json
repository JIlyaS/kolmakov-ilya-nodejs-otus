{"ast":null,"code":"import { persist as r } from \"../index.js\";\nimport { nil as t } from \"../nil/index.js\";\nimport { storage as o } from \"../storage/index.js\";\nfunction e() {\n  try {\n    return \"undefined\" != typeof localStorage;\n  } catch (r) {\n    return !1;\n  }\n}\nfunction n(n) {\n  return a => r({\n    adapter: e() ? o({\n      storage: localStorage,\n      sync: !0,\n      ...n,\n      ...a\n    }) : t(\"local\"),\n    ...n,\n    ...a\n  });\n}\nvar a = n();\nexport { n as createPersist, a as persist };","map":{"version":3,"names":["e","localStorage","r","n","a","adapter","o","storage","sync","t","createPersist","persist"],"sources":["/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/src/local/index.ts"],"sourcesContent":["import type { Subscription } from 'effector'\nimport type {\n  ConfigPersist as BaseConfigPersist,\n  ConfigCommon,\n  ConfigJustStore,\n  ConfigJustSourceTarget,\n} from '../types'\nimport { persist as base } from '../persist'\nimport { nil } from '../nil'\nimport { storage } from '../storage'\n\nexport type { Done, Fail, Finally, StorageAdapter } from '../types'\n\nexport interface ConfigPersist extends BaseConfigPersist {\n  sync?: boolean\n}\n\nexport interface AdapterConfig {\n  sync?: boolean\n  serialize?: (value: any) => string\n  deserialize?: (value: string) => any\n}\n\nexport interface ConfigStore<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustStore<State> {}\n\nexport interface ConfigSourceTarget<State, Err = Error>\n  extends AdapterConfig,\n    ConfigCommon<State, Err>,\n    ConfigJustSourceTarget<State> {}\n\nexport interface Persist {\n  <State, Err = Error>(config: ConfigSourceTarget<State, Err>): Subscription\n  <State, Err = Error>(config: ConfigStore<State, Err>): Subscription\n}\n\n/**\n * Function, checking if `localStorage` exists and accessible\n */\nfunction supports() {\n  try {\n    return typeof localStorage !== 'undefined'\n  } catch (error) {\n    return false // should somehow return error instance?\n  }\n}\n\n/**\n * Creates custom partially applied `persist`\n * with predefined `localStorage` adapter\n */\nexport function createPersist(defaults?: ConfigPersist): Persist {\n  return (config) =>\n    base({\n      adapter: supports()\n        ? storage({\n            storage: localStorage,\n            sync: true,\n            ...defaults,\n            ...config,\n          })\n        : nil('local'),\n      ...defaults,\n      ...config,\n    })\n}\n\n/**\n * Default partially applied `persist`\n */\nexport const persist = createPersist()\n"],"mappings":";;;AAyCA,SAASA,EAAA;EACP;IACE,OAA+B,sBAAjBC,YAGf;EAAA,CAFC,QAAOC,CAAA;IACP,QAAO,CACR;EAAA;AACF;AAMM,SAASC,EAAcA,CAAA;EAC5B,OAAQC,CAAA,IACNF,CAAA,CAAK;IACHG,OAAA,EAASL,CAAA,KACLM,CAAA,CAAQ;MACNC,OAAA,EAASN,YAAA;MACTO,IAAA,GAAM;MAAA,GACHL,CAAA;MAAA,GACAC;IAAA,KAELK,CAAA,CAAI;IAAA,GACLN,CAAA;IAAA,GACAC;EAAA,EAER;AAAA;AAKY,IAAAA,CAAA,GAAUD,CAAA;AAAA,SAAAA,CAAA,IAAAO,aAAA,EAAAN,CAAA,IAAAO,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}