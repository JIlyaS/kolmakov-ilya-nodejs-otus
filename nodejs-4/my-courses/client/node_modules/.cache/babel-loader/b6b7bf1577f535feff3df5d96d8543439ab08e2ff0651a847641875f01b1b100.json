{"ast":null,"code":"import { createStore, createEffect, createEvent, sample } from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { getCourses, createCourse } from \"../../api/rest/courses\";\n// import format from \"date-fns/format\";\n// import parse from \"date-fns/parse\";\n// import { Column, TableRow } from \"@admiral-ds/react-ui\";\n\n// import { notificationService } from \"@src/common/services/notification/notification\";\n\n// import { tasksService } from \"./tasks.service\";\n// import { columnList } from \"./utils/constants\";\n// import {\n//   ITask,\n//   ITaskPriorities,\n//   ITaskStatuses,\n//   ITaskTypes,\n//   IUpdateTaskRequest,\n// } from \"./types\";\n\nconst CourseListPageGate = createGate(\"CourseListPage\");\nconst CoursePageGate = createGate(\"CoursePage\");\nconst $courseList = createStore([]);\nconst getCourseList = createEvent();\nconst addCourse = createEvent();\nconst getCourse = createEvent();\nconst getCourseListFx = createEffect(() => getCourses());\n// const createCourseFx = createEffect(() => createCourse());\nconst addCourseFx = createEffect(data => createCourse(data));\nconst getCourseFx = createEffect(id => getCourse(id));\nsample({\n  clock: CourseListPageGate.open,\n  target: getCourseList\n});\nsample({\n  clock: getCourseList,\n  target: getCourseListFx\n});\nsample({\n  clock: addCourse,\n  target: addCourseFx\n});\n$courseList.on(getCourseListFx.doneData, (_, payload) => {\n  return payload;\n});\nsample({\n  clock: CoursePageGate.open,\n  target: getCourse\n});\nsample({\n  clock: getCourse,\n  target: getCourseFx\n});\n\n// sample({\n//   clock: getTaskTableList,\n//   target: [\n//     getTaskTableListFx,\n//     getTaskTypesFx,\n//     getTaskStatusesFx,\n//     getTaskPrioritiesFx,\n//   ],\n// });\n\n// const TaskWidgetGate = createGate(\"TaskWidgetGate\");\n\n// const updateStatusTask = createEvent<IUpdateTaskRequest>();\n// const getTaskTableList = createEvent();\n\n// const getTaskTableListFx = createEffect(() => tasksService.getTasks());\n// const getTaskTypesFx = createEffect(() => tasksService.getTaskTypes());\n// const getTaskStatusesFx = createEffect(() => tasksService.getTaskStatuses());\n// const getTaskPrioritiesFx = createEffect(() =>\n//   tasksService.getTaskPriorities()\n// );\n// const updateStatusTaskFx = createEffect((data) =>\n//   tasksService.updateTask(data.numberTask, { statusId: data.numberStatus })\n// );\n\n// const $originTaskRowList = createStore<ITask[]>([]);\n// const $taskTypes = createStore<ITaskTypes[]>([]);\n// const $taskStatuses = createStore<ITaskStatuses[]>([]);\n// const $taskPriorities = createStore<ITaskPriorities[]>([]);\n// const $taskRowList = createStore<TableRow[]>([]);\n// const $taskColumnList = createStore<Column[]>(columnList);\n\n// const $isTaskTableListEmpty = $taskRowList.map((list) => list.length === 0);\n// const $isTasksLoading = getTaskTableListFx.pending;\n// const $isTaskTypesLoading = getTaskTypesFx.pending;\n// const $isTaskStatusesLoading = getTaskStatusesFx.pending;\n// const $isTaskPrioritiesLoading = getTaskPrioritiesFx.pending;\n\n// sample({\n//   clock: updateStatusTask,\n//   target: updateStatusTaskFx,\n// });\n\n// const showErrorFx = createEffect(() => {\n//   notificationService.showErrorNotification(\n//     \"Произошла ошибка, повторите действие позднее\",\n//     \"Ошибка\"\n//   );\n// });\n\n// sample({\n//   clock: getTaskTableListFx.fail,\n//   target: showErrorFx,\n// });\n\n// const $isError = createStore<boolean>(false);\n\n// sample({\n//   clock: showErrorFx.done,\n//   fn: () => true,\n//   target: $isError,\n// });\n\n// sample({\n//   clock: getTaskTableListFx,\n//   fn: () => false,\n//   target: $isError,\n// });\n\n// $originTaskRowList\n//   .on(getTaskTableListFx.doneData, (_, payload) => payload?.content ?? [])\n//   .on(updateStatusTaskFx.doneData, (state) => {\n//     notificationService.showSuccessNotification(\"Задача успешно обновлена\");\n\n//     // TODO: не убирать, нужно проверить функционал на работоспособность, смена статуса\n//     // const currentStateTaskIdx = state.findIndex(\n//     //   (task) => task.number === payload.number\n//     // );\n//     // state[currentStateTaskIdx].statusId = payload.statusId;\n\n//     return [...state];\n//   })\n//   .on(updateStatusTaskFx.fail, (state) => [...state]);\n\n// $taskTypes.on(getTaskTypesFx.doneData, (_, payload) => payload);\n// $taskStatuses.on(getTaskStatusesFx.doneData, (_, payload) => payload);\n// $taskPriorities.on(getTaskPrioritiesFx.doneData, (_, payload) => payload);\n\n// const getTasksSuccessAction = merge([\n//   getTaskTableListFx.doneData,\n//   getTaskTypesFx.doneData,\n//   getTaskStatusesFx.doneData,\n//   getTaskPrioritiesFx.doneData,\n// ]);\n\n// sample({\n//   clock: getTasksSuccessAction,\n//   source: combine(\n//     $originTaskRowList,\n//     $taskTypes,\n//     $taskStatuses,\n//     $taskPriorities,\n//     (originTaskRowList, taskTypes, taskStatuses, taskPriorities) => {\n//       const taskRowList = originTaskRowList.map((task) => {\n//         const currentType = taskTypes.find((type) => type.id === task.typeId);\n//         const currentStatus = taskStatuses.find(\n//           (status) => status.id === task.statusId\n//         );\n//         const currentPriority = taskPriorities.find(\n//           (priority) => priority.id === task.priorityId\n//         );\n\n//         return {\n//           ...task,\n//           id: task.number,\n//           currentType,\n//           currentStatus,\n//           currentPriority,\n//           status: currentStatus?.name,\n//           priority: currentPriority?.name,\n//           dueDate: task?.dueDate\n//             ? format(parse(task.dueDate, \"yyyy-MM-dd\", new Date()), \"dd.MM.yy\")\n//             : \"\",\n//         };\n//       });\n\n//       return taskRowList;\n//     }\n//   ),\n//   target: $taskRowList,\n// });\n\n// sample({\n//   clock: TaskWidgetGate.open,\n//   target: [\n//     getTaskTableListFx,\n//     getTaskTypesFx,\n//     getTaskStatusesFx,\n//     getTaskPrioritiesFx,\n//   ],\n// });\n\n// sample({\n//   clock: getTaskTableList,\n//   target: [\n//     getTaskTableListFx,\n//     getTaskTypesFx,\n//     getTaskStatusesFx,\n//     getTaskPrioritiesFx,\n//   ],\n// });\n\n// export {\n//   TaskWidgetGate,\n//   $taskColumnList,\n//   $taskRowList,\n//   $isTasksLoading,\n//   $isTaskTypesLoading,\n//   $isTaskStatusesLoading,\n//   $isTaskPrioritiesLoading,\n//   $taskTypes,\n//   $taskStatuses,\n//   $taskPriorities,\n//   $isError,\n//   $isTaskTableListEmpty,\n//   getTaskTableList,\n//   updateStatusTask,\n// };\n\nexport { CourseListPageGate, $courseList, addCourse, addCourseFx };","map":{"version":3,"names":["createStore","createEffect","createEvent","sample","createGate","getCourses","createCourse","CourseListPageGate","CoursePageGate","$courseList","getCourseList","addCourse","getCourse","getCourseListFx","addCourseFx","data","getCourseFx","id","clock","open","target","on","doneData","_","payload"],"sources":["/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/src/entities/course/model.ts"],"sourcesContent":["import {\n  createStore,\n  combine,\n  createEffect,\n  createEvent,\n  sample,\n  merge,\n} from \"effector\";\nimport { createGate } from \"effector-react\";\nimport { getCourses, createCourse } from \"../../api/rest/courses\";\nimport { Course } from \"../../api/rest/courses/types\";\n\n// import format from \"date-fns/format\";\n// import parse from \"date-fns/parse\";\n// import { Column, TableRow } from \"@admiral-ds/react-ui\";\n\n// import { notificationService } from \"@src/common/services/notification/notification\";\n\n// import { tasksService } from \"./tasks.service\";\n// import { columnList } from \"./utils/constants\";\n// import {\n//   ITask,\n//   ITaskPriorities,\n//   ITaskStatuses,\n//   ITaskTypes,\n//   IUpdateTaskRequest,\n// } from \"./types\";\n\nconst CourseListPageGate = createGate(\"CourseListPage\");\nconst CoursePageGate = createGate<string | number>(\"CoursePage\");\n\nconst $courseList = createStore<Course[]>([]);\n\nconst getCourseList = createEvent();\nconst addCourse = createEvent<Course>();\nconst getCourse = createEvent<string | number>();\n\nconst getCourseListFx = createEffect(() => getCourses());\n// const createCourseFx = createEffect(() => createCourse());\nconst addCourseFx = createEffect((data: Course) => createCourse(data));\nconst getCourseFx = createEffect((id: string | number) => getCourse(id));\n\nsample({\n  clock: CourseListPageGate.open,\n  target: getCourseList,\n});\n\nsample({\n  clock: getCourseList,\n  target: getCourseListFx,\n});\n\nsample({\n  clock: addCourse,\n  target: addCourseFx,\n});\n\n$courseList.on(getCourseListFx.doneData, (_, payload: any) => {\n  return payload;\n});\n\nsample({\n  clock: CoursePageGate.open,\n  target: getCourse\n});\n\nsample({\n  clock: getCourse,\n  target: getCourseFx,\n});\n\n// sample({\n//   clock: getTaskTableList,\n//   target: [\n//     getTaskTableListFx,\n//     getTaskTypesFx,\n//     getTaskStatusesFx,\n//     getTaskPrioritiesFx,\n//   ],\n// });\n\n// const TaskWidgetGate = createGate(\"TaskWidgetGate\");\n\n// const updateStatusTask = createEvent<IUpdateTaskRequest>();\n// const getTaskTableList = createEvent();\n\n// const getTaskTableListFx = createEffect(() => tasksService.getTasks());\n// const getTaskTypesFx = createEffect(() => tasksService.getTaskTypes());\n// const getTaskStatusesFx = createEffect(() => tasksService.getTaskStatuses());\n// const getTaskPrioritiesFx = createEffect(() =>\n//   tasksService.getTaskPriorities()\n// );\n// const updateStatusTaskFx = createEffect((data) =>\n//   tasksService.updateTask(data.numberTask, { statusId: data.numberStatus })\n// );\n\n// const $originTaskRowList = createStore<ITask[]>([]);\n// const $taskTypes = createStore<ITaskTypes[]>([]);\n// const $taskStatuses = createStore<ITaskStatuses[]>([]);\n// const $taskPriorities = createStore<ITaskPriorities[]>([]);\n// const $taskRowList = createStore<TableRow[]>([]);\n// const $taskColumnList = createStore<Column[]>(columnList);\n\n// const $isTaskTableListEmpty = $taskRowList.map((list) => list.length === 0);\n// const $isTasksLoading = getTaskTableListFx.pending;\n// const $isTaskTypesLoading = getTaskTypesFx.pending;\n// const $isTaskStatusesLoading = getTaskStatusesFx.pending;\n// const $isTaskPrioritiesLoading = getTaskPrioritiesFx.pending;\n\n// sample({\n//   clock: updateStatusTask,\n//   target: updateStatusTaskFx,\n// });\n\n// const showErrorFx = createEffect(() => {\n//   notificationService.showErrorNotification(\n//     \"Произошла ошибка, повторите действие позднее\",\n//     \"Ошибка\"\n//   );\n// });\n\n// sample({\n//   clock: getTaskTableListFx.fail,\n//   target: showErrorFx,\n// });\n\n// const $isError = createStore<boolean>(false);\n\n// sample({\n//   clock: showErrorFx.done,\n//   fn: () => true,\n//   target: $isError,\n// });\n\n// sample({\n//   clock: getTaskTableListFx,\n//   fn: () => false,\n//   target: $isError,\n// });\n\n// $originTaskRowList\n//   .on(getTaskTableListFx.doneData, (_, payload) => payload?.content ?? [])\n//   .on(updateStatusTaskFx.doneData, (state) => {\n//     notificationService.showSuccessNotification(\"Задача успешно обновлена\");\n\n//     // TODO: не убирать, нужно проверить функционал на работоспособность, смена статуса\n//     // const currentStateTaskIdx = state.findIndex(\n//     //   (task) => task.number === payload.number\n//     // );\n//     // state[currentStateTaskIdx].statusId = payload.statusId;\n\n//     return [...state];\n//   })\n//   .on(updateStatusTaskFx.fail, (state) => [...state]);\n\n// $taskTypes.on(getTaskTypesFx.doneData, (_, payload) => payload);\n// $taskStatuses.on(getTaskStatusesFx.doneData, (_, payload) => payload);\n// $taskPriorities.on(getTaskPrioritiesFx.doneData, (_, payload) => payload);\n\n// const getTasksSuccessAction = merge([\n//   getTaskTableListFx.doneData,\n//   getTaskTypesFx.doneData,\n//   getTaskStatusesFx.doneData,\n//   getTaskPrioritiesFx.doneData,\n// ]);\n\n// sample({\n//   clock: getTasksSuccessAction,\n//   source: combine(\n//     $originTaskRowList,\n//     $taskTypes,\n//     $taskStatuses,\n//     $taskPriorities,\n//     (originTaskRowList, taskTypes, taskStatuses, taskPriorities) => {\n//       const taskRowList = originTaskRowList.map((task) => {\n//         const currentType = taskTypes.find((type) => type.id === task.typeId);\n//         const currentStatus = taskStatuses.find(\n//           (status) => status.id === task.statusId\n//         );\n//         const currentPriority = taskPriorities.find(\n//           (priority) => priority.id === task.priorityId\n//         );\n\n//         return {\n//           ...task,\n//           id: task.number,\n//           currentType,\n//           currentStatus,\n//           currentPriority,\n//           status: currentStatus?.name,\n//           priority: currentPriority?.name,\n//           dueDate: task?.dueDate\n//             ? format(parse(task.dueDate, \"yyyy-MM-dd\", new Date()), \"dd.MM.yy\")\n//             : \"\",\n//         };\n//       });\n\n//       return taskRowList;\n//     }\n//   ),\n//   target: $taskRowList,\n// });\n\n// sample({\n//   clock: TaskWidgetGate.open,\n//   target: [\n//     getTaskTableListFx,\n//     getTaskTypesFx,\n//     getTaskStatusesFx,\n//     getTaskPrioritiesFx,\n//   ],\n// });\n\n// sample({\n//   clock: getTaskTableList,\n//   target: [\n//     getTaskTableListFx,\n//     getTaskTypesFx,\n//     getTaskStatusesFx,\n//     getTaskPrioritiesFx,\n//   ],\n// });\n\n// export {\n//   TaskWidgetGate,\n//   $taskColumnList,\n//   $taskRowList,\n//   $isTasksLoading,\n//   $isTaskTypesLoading,\n//   $isTaskStatusesLoading,\n//   $isTaskPrioritiesLoading,\n//   $taskTypes,\n//   $taskStatuses,\n//   $taskPriorities,\n//   $isError,\n//   $isTaskTableListEmpty,\n//   getTaskTableList,\n//   updateStatusTask,\n// };\n\nexport { CourseListPageGate, $courseList, addCourse, addCourseFx };\n"],"mappings":"AAAA,SACEA,WAAW,EAEXC,YAAY,EACZC,WAAW,EACXC,MAAM,QAED,UAAU;AACjB,SAASC,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,EAAEC,YAAY,QAAQ,wBAAwB;AAGjE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAkB,GAAGH,UAAU,CAAC,gBAAgB,CAAC;AACvD,MAAMI,cAAc,GAAGJ,UAAU,CAAkB,YAAY,CAAC;AAEhE,MAAMK,WAAW,GAAGT,WAAW,CAAW,EAAE,CAAC;AAE7C,MAAMU,aAAa,GAAGR,WAAW,EAAE;AACnC,MAAMS,SAAS,GAAGT,WAAW,EAAU;AACvC,MAAMU,SAAS,GAAGV,WAAW,EAAmB;AAEhD,MAAMW,eAAe,GAAGZ,YAAY,CAAC,MAAMI,UAAU,EAAE,CAAC;AACxD;AACA,MAAMS,WAAW,GAAGb,YAAY,CAAEc,IAAY,IAAKT,YAAY,CAACS,IAAI,CAAC,CAAC;AACtE,MAAMC,WAAW,GAAGf,YAAY,CAAEgB,EAAmB,IAAKL,SAAS,CAACK,EAAE,CAAC,CAAC;AAExEd,MAAM,CAAC;EACLe,KAAK,EAAEX,kBAAkB,CAACY,IAAI;EAC9BC,MAAM,EAAEV;AACV,CAAC,CAAC;AAEFP,MAAM,CAAC;EACLe,KAAK,EAAER,aAAa;EACpBU,MAAM,EAAEP;AACV,CAAC,CAAC;AAEFV,MAAM,CAAC;EACLe,KAAK,EAAEP,SAAS;EAChBS,MAAM,EAAEN;AACV,CAAC,CAAC;AAEFL,WAAW,CAACY,EAAE,CAACR,eAAe,CAACS,QAAQ,EAAE,CAACC,CAAC,EAAEC,OAAY,KAAK;EAC5D,OAAOA,OAAO;AAChB,CAAC,CAAC;AAEFrB,MAAM,CAAC;EACLe,KAAK,EAAEV,cAAc,CAACW,IAAI;EAC1BC,MAAM,EAAER;AACV,CAAC,CAAC;AAEFT,MAAM,CAAC;EACLe,KAAK,EAAEN,SAAS;EAChBQ,MAAM,EAAEJ;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAST,kBAAkB,EAAEE,WAAW,EAAEE,SAAS,EAAEG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}