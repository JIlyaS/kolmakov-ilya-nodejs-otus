{"ast":null,"code":"function e(e, t) {\n  for (let r in e) t(e[r], r);\n}\nfunction t(e, t) {\n  e.forEach(t);\n}\nfunction r(e, t) {\n  if (!e) throw Error(t);\n}\nfunction n(e, t) {\n  me = {\n    parent: me,\n    value: e,\n    template: J(e, 'template') || ge(),\n    sidRoot: J(e, 'sidRoot') || me && me.sidRoot\n  };\n  try {\n    return t();\n  } finally {\n    me = U(me);\n  }\n}\nfunction a() {\n  let {\n    node: e = [],\n    from: r,\n    source: n,\n    parent: a = r || n,\n    to: i,\n    target: o,\n    child: l = i || o,\n    scope: s = {},\n    meta: f = {},\n    family: u = {\n      type: 'regular'\n    },\n    regional: d\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let c = ve(a),\n    p = ve(u.links),\n    m = ve(u.owners),\n    g = [];\n  t(e, e => e && le(g, e));\n  let h = {\n    id: ce(),\n    seq: g,\n    next: ve(l),\n    meta: f,\n    scope: s,\n    family: {\n      type: u.type || \"crosslink\",\n      links: p,\n      owners: m\n    }\n  };\n  return t(p, e => le(L(e), h)), t(m, e => le(T(e), h)), t(c, e => le(e.next, h)), d && me && be(W(me), [h]), h;\n}\nfunction i(e, r, n) {\n  let a,\n    i = tt,\n    o = null,\n    l = Xe;\n  if (e.target && (r = e.params, n = e.defer, a = e.meta, i = 'page' in e ? e.page : i, e.stack && (o = e.stack), l = G(e) || l, e = e.target), l && Xe && l !== Xe && (Xe = null), Array.isArray(e)) for (let t = 0; t < e.length; t++) Ge('pure', i, V(e[t]), o, r[t], l, a);else Ge('pure', i, V(e), o, r, l, a);\n  if (n && !Ye) return;\n  let s,\n    f,\n    u,\n    d,\n    c,\n    p,\n    m = {\n      isRoot: Ye,\n      currentPage: tt,\n      scope: Xe,\n      isWatch: Ze,\n      isPure: et\n    };\n  Ye = 0;\n  e: for (; d = Ue();) {\n    let {\n      idx: e,\n      stack: r,\n      type: n\n    } = d;\n    u = r.node, tt = c = r.page, Xe = G(r), c ? p = c.reg : Xe && (p = Xe.reg);\n    let a = !!c,\n      i = !!Xe,\n      o = {\n        fail: 0,\n        scope: u.scope\n      };\n    s = f = 0;\n    for (let t = e; t < u.seq.length && !s; t++) {\n      let l = u.seq[t];\n      if (l.order) {\n        let {\n            priority: a,\n            barrierID: i\n          } = l.order,\n          o = i ? c ? `${c.fullID}_${i}` : i : 0;\n        if (t !== e || n !== a) {\n          i ? Qe.has(o) || (Qe.add(o), Je(t, r, a, i)) : Je(t, r, a);\n          continue e;\n        }\n        i && Qe.delete(o);\n      }\n      switch (l.type) {\n        case 'mov':\n          {\n            let e,\n              t = l.data;\n            switch (t.from) {\n              case _:\n                e = W(r);\n                break;\n              case \"a\":\n              case 'b':\n                e = r[t.from];\n                break;\n              case \"value\":\n                e = t.store;\n                break;\n              case \"store\":\n                if (p && !p[t.store.id]) if (a) {\n                  let e = at(c, t.store.id);\n                  r.page = c = e, e ? p = e.reg : i ? (st(Xe, t.store, 0, 1, t.softRead), p = Xe.reg) : p = void 0;\n                } else i && st(Xe, t.store, 0, 1, t.softRead);\n                e = Ve(p && p[t.store.id] || t.store);\n            }\n            switch (t.to) {\n              case _:\n                r.value = e;\n                break;\n              case \"a\":\n              case 'b':\n                r[t.to] = e;\n                break;\n              case \"store\":\n                ot(c, Xe, u, t.target).current = e;\n            }\n            break;\n          }\n        case 'compute':\n          let e = l.data;\n          if (e.fn) {\n            Ze = 'watch' === J(u, 'op'), et = e.pure;\n            let t = e.safe ? (0, e.fn)(W(r), o.scope, r) : ft(o, e.fn, r);\n            e.filter ? f = !t : r.value = t, Ze = m.isWatch, et = m.isPure;\n          }\n      }\n      s = o.fail || f;\n    }\n    if (!s) {\n      let e = W(r),\n        n = G(r);\n      if (t(u.next, t => {\n        Ge('child', c, t, r, e, n);\n      }), n) {\n        J(u, 'needFxCounter') && Ge('child', c, n.fxCount, r, e, n), J(u, 'storeChange') && Ge('child', c, n.storeChange, r, e, n), J(u, 'warnSerialize') && Ge('child', c, n.warnSerializeNode, r, e, n);\n        let a = n.additionalLinks[u.id];\n        a && t(a, t => {\n          Ge('child', c, t, r, e, n);\n        });\n      }\n    }\n  }\n  Ye = m.isRoot, tt = m.currentPage, Xe = G(m);\n}\nfunction o(t) {\n  let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"combine\";\n  let n = r + '(',\n    a = '',\n    i = 0;\n  return e(t, e => {\n    i < 25 && (null != e && (n += a, n += X(e) ? Q(e).fullName : e.toString()), i += 1, a = ', ');\n  }), n + ')';\n}\nfunction l(e, t) {\n  e.shortName = t, Object.assign(Q(e), s(t, U(e)));\n}\nfunction s(e, t) {\n  let r,\n    n,\n    a = e;\n  if (t) {\n    let a = Q(t);\n    0 === e.length ? (r = a.path, n = a.fullName) : (r = a.path.concat([e]), n = 0 === a.fullName.length ? e : a.fullName + '/' + e);\n  } else r = 0 === e.length ? [] : [e], n = e;\n  return {\n    shortName: a,\n    fullName: n,\n    path: r\n  };\n}\nfunction f(e, t) {\n  let r = t ? e : e[0];\n  xe(r);\n  let n = r.or,\n    a = r.and;\n  if (a) {\n    let r = t ? a : a[0];\n    if (ke(r) && 'and' in r) {\n      let r = f(a, t);\n      e = r[0], n = {\n        ...n,\n        ...r[1]\n      };\n    } else e = a;\n  }\n  return [e, n];\n}\nfunction u(e) {\n  let r = ge();\n  if (r) {\n    let n = r.handlers[e];\n    for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      t[_key - 1] = arguments[_key];\n    }\n    if (n) return n(r, ...t);\n  }\n}\nfunction d(e, t) {\n  let r = ut({\n      or: t,\n      and: 'string' == typeof e ? {\n        name: e\n      } : e\n    }),\n    n = function (e) {\n      for (var _len2 = arguments.length, t = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        t[_key2 - 1] = arguments[_key2];\n      }\n      return se(!J(n, 'derived'), 'call of derived event', 'createEvent'), se(!et, 'unit call from pure function', 'operators like sample'), tt ? ((e, t, r, n) => {\n        let a = tt,\n          i = null;\n        if (t) for (i = tt; i && i.template !== t;) i = U(i);\n        nt(i);\n        let o = e.create(r, n);\n        return nt(a), o;\n      })(n, o, e, t) : n.create(e, t);\n    },\n    o = ge(),\n    l = Object.assign(n, {\n      graphite: a({\n        meta: kt(\"event\", n, r),\n        regional: 1\n      }),\n      create: e => (i({\n        target: n,\n        params: e,\n        scope: Xe\n      }), e),\n      watch: e => bt(n, e),\n      map: e => wt(n, P, e, [Re()]),\n      filter: e => wt(n, \"filter\", e.fn ? e : e.fn, [Re(Ae, 1)]),\n      filterMap: e => wt(n, 'filterMap', e, [Re(), De(e => !Se(e), 1)]),\n      prepend(e) {\n        let t = d('* \\u2192 ' + n.shortName, {\n          parent: U(n)\n        });\n        return u('eventPrepend', V(t)), ht(t, n, [Re()], 'prepend', e), vt(n, t), t;\n      }\n    });\n  return null != r && r.domain && r.domain.hooks.event(l), l;\n}\nfunction c(e, n, a, i) {\n  return $e(a, n, 'first argument'), r(we(i), 'second argument should be a function'), se(!J(e, 'derived'), `${n} in derived store`, `${n} in store created via createStore`), t(Array.isArray(a) ? a : [a], t => {\n    e.off(t), H(e).set(t, gt(St(t, e, 'on', Me, i)));\n  }), e;\n}\nfunction p(e, n) {\n  let o = ut(n),\n    l = _e(e),\n    s = d({\n      named: 'updates',\n      derived: 1\n    });\n  u('storeBase', l);\n  let f = l.id,\n    m = {\n      subscribers: new Map(),\n      updates: s,\n      defaultState: e,\n      stateRef: l,\n      getState() {\n        let e,\n          t = l;\n        if (tt) {\n          let t = tt;\n          for (; t && !t.reg[f];) t = U(t);\n          t && (e = t);\n        }\n        return !e && Xe && (st(Xe, l, 1), e = Xe), e && (t = e.reg[f]), Ve(t);\n      },\n      setState: e => i({\n        target: m,\n        params: e,\n        defer: 1,\n        scope: Xe\n      }),\n      reset: function () {\n        for (var _len3 = arguments.length, e = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          e[_key3] = arguments[_key3];\n        }\n        return t(e, e => c(m, '.reset', e, () => m.defaultState)), m;\n      },\n      on: (e, t) => c(m, '.on', e, t),\n      off(e) {\n        let t = H(m).get(e);\n        return t && (t(), H(m).delete(e)), m;\n      },\n      map(e, t) {\n        let r, n;\n        ke(e) && (r = e, e = e.fn), se(Se(t), 'second argument of store.map', 'updateFilter');\n        let a = m.getState();\n        ge() ? n = null : Se(a) || (n = e(a, t));\n        let i = p(n, {\n            name: `${m.shortName} \\u2192 *`,\n            derived: 1,\n            and: r\n          }),\n          o = St(m, i, P, Ce, e);\n        return Le(B(i), {\n          type: P,\n          fn: e,\n          from: l\n        }), B(i).noInit = 1, u('storeMap', l, o), i;\n      },\n      watch(e, t) {\n        if (!t || !X(e)) {\n          let t = bt(m, e);\n          return u('storeWatch', l, e) || e(m.getState()), t;\n        }\n        return r(we(t), 'second argument should be a function'), e.watch(e => t(m.getState(), e));\n      }\n    },\n    g = kt(\"store\", m, o),\n    h = m.defaultConfig.updateFilter;\n  m.graphite = a({\n    scope: {\n      state: l,\n      fn: h\n    },\n    node: [De((e, t, r) => (r.scope && !r.scope.reg[l.id] && (r.b = 1), e)), Ee(l), De((e, t, _ref) => {\n      let {\n        a: r,\n        b: n\n      } = _ref;\n      return !Se(e) && (e !== r || n);\n    }, 1), h && Re(Ce, 1), Ne({\n      from: _,\n      target: l\n    })],\n    child: s,\n    meta: g,\n    regional: 1\n  });\n  let y = J(m, 'serialize'),\n    b = J(m, 'derived'),\n    v = 'ignore' === y,\n    k = !y || v ? 0 : y,\n    w = J(m, 'sid');\n  return w && (K(m, 'storeChange', 1), l.sid = w, k && (l.meta = {\n    ...(null == l ? void 0 : l.meta),\n    serialize: k\n  })), w || v || b || K(m, 'warnSerialize', 1), r(b || !Se(e), \"current state can't be undefined, use null instead\"), be(m, [s]), null != o && o.domain && o.domain.hooks.store(m), b || (m.reinit = d(), m.reset(m.reinit)), m;\n}\nfunction m() {\n  for (var _len4 = arguments.length, e = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    e[_key4] = arguments[_key4];\n  }\n  let t, n, a;\n  [e, a] = f(e);\n  let i,\n    o,\n    l,\n    s = e[e.length - 1];\n  if (we(s) ? (n = e.slice(0, -1), t = s) : n = e, 1 === n.length) {\n    let e = n[0];\n    Z(e) || (i = e, o = 1);\n  }\n  if (!o && (i = n, t)) {\n    l = 1;\n    let e = t;\n    t = t => e(...t);\n  }\n  return r(ke(i), 'shape should be an object'), xt(Array.isArray(i), !l, i, a, t);\n}\nfunction g() {\n  return se(0, 'createStoreObject', 'combine'), m(...arguments);\n}\nfunction h() {\n  let e = {};\n  return e.req = new Promise((t, r) => {\n    e.rs = t, e.rj = r;\n  }), e.req.catch(() => {}), e;\n}\nfunction y(e, t) {\n  let n = ut(we(e) ? {\n      handler: e\n    } : e, t),\n    o = d(we(e) ? {\n      handler: e\n    } : e, t),\n    l = V(o);\n  K(l, 'op', o.kind = \"effect\"), o.use = e => (r(we(e), '.use argument should be a function'), g.scope.handler = e, o), o.use.getCurrent = () => g.scope.handler;\n  let s = o.finally = d({\n      named: 'finally',\n      derived: 1\n    }),\n    f = o.done = s.filterMap({\n      named: 'done',\n      fn(_ref2) {\n        let {\n          status: e,\n          params: t,\n          result: r\n        } = _ref2;\n        if ('done' === e) return {\n          params: t,\n          result: r\n        };\n      }\n    }),\n    u = o.fail = s.filterMap({\n      named: 'fail',\n      fn(_ref3) {\n        let {\n          status: e,\n          params: t,\n          error: r\n        } = _ref3;\n        if ('fail' === e) return {\n          params: t,\n          error: r\n        };\n      }\n    }),\n    c = o.doneData = f.map({\n      named: 'doneData',\n      fn: _ref4 => {\n        let {\n          result: e\n        } = _ref4;\n        return e;\n      }\n    }),\n    m = o.failData = u.map({\n      named: 'failData',\n      fn: _ref5 => {\n        let {\n          error: e\n        } = _ref5;\n        return e;\n      }\n    }),\n    g = a({\n      scope: {\n        handlerId: J(l, 'sid'),\n        handler: o.defaultConfig.handler || (() => r(0, `no handler used in ${o.getType()}`))\n      },\n      node: [De((e, t, r) => {\n        let n = t,\n          a = n.handler;\n        if (G(r)) {\n          let e = G(r).handlers[n.handlerId];\n          e && (a = e);\n        }\n        return e.handler = a, e;\n      }, 0, 1), De((_ref6, a, i) => {\n        let {\n          params: e,\n          req: t,\n          handler: r,\n          args: n = [e]\n        } = _ref6;\n        let o = $t(i),\n          l = jt(e, t, 1, s, i, o),\n          f = jt(e, t, 0, s, i, o),\n          [u, d] = zt(r, f, n);\n        u && (ke(d) && we(d.then) ? d.then(l, f) : l(d));\n      }, 0, 1)],\n      meta: {\n        op: 'fx',\n        fx: 'runner'\n      }\n    });\n  l.scope.runner = g, le(l.seq, De((e, _ref7, r) => {\n    let {\n      runner: t\n    } = _ref7;\n    let n = U(r) ? {\n      params: e,\n      req: {\n        rs(e) {},\n        rj(e) {}\n      }\n    } : e;\n    return r.meta || (r.meta = {\n      fxID: pe()\n    }), i({\n      target: t,\n      params: n,\n      defer: 1,\n      scope: G(r),\n      meta: r.meta\n    }), n.params;\n  }, 0, 1)), o.create = e => {\n    let t = h(),\n      r = {\n        params: e,\n        req: t\n      };\n    if (Xe && !Ze) {\n      let e = Xe;\n      t.req.finally(() => {\n        rt(e);\n      }).catch(() => {});\n    }\n    return i({\n      target: o,\n      params: r,\n      scope: Xe\n    }), t.req;\n  };\n  let y = o.inFlight = p(0, {\n    serialize: 'ignore'\n  }).on(o, e => e + 1).on(s, e => e - 1).map({\n    fn: e => e,\n    named: 'inFlight'\n  });\n  K(s, 'needFxCounter', 'dec'), K(o, 'needFxCounter', 1);\n  let b = o.pending = y.map({\n    fn: e => e > 0,\n    named: 'pending'\n  });\n  return be(o, [s, f, u, c, m, b, y]), null != n && n.domain && n.domain.hooks.effect(o), o;\n}\nfunction b(e) {\n  let t;\n  [e, t] = f(e, 1);\n  let {\n      source: r,\n      effect: n,\n      mapParams: a\n    } = e,\n    o = y(e, t);\n  K(o, 'attached', 1);\n  let l,\n    {\n      runner: u\n    } = V(o).scope,\n    d = De((e, t, n) => {\n      let l,\n        {\n          params: s,\n          req: f,\n          handler: u\n        } = e,\n        d = o.finally,\n        c = $t(n),\n        p = jt(s, f, 0, d, n, c),\n        m = n.a,\n        g = te(u),\n        h = 1;\n      if (a ? [h, l] = zt(a, p, [s, m]) : l = r && g ? m : s, h) {\n        if (!g) return e.args = [m, l], 1;\n        i({\n          target: u,\n          params: {\n            params: l,\n            req: {\n              rs: jt(s, f, 1, d, n, c),\n              rj: p\n            }\n          },\n          page: n.page,\n          defer: 1,\n          meta: n.meta\n        });\n      }\n    }, 1, 1);\n  if (r) {\n    let e;\n    Z(r) ? (e = r, be(e, [o])) : (e = m(r), be(o, [e])), l = [Ee(B(e)), d];\n  } else l = [d];\n  u.seq.splice(1, 0, ...l), o.use(n);\n  let c = U(n);\n  return c && (Object.assign(Q(o), s(o.shortName, c)), o.defaultConfig.parent = c), vt(n, o, \"effect\"), o;\n}\nfunction v() {\n  for (var _len5 = arguments.length, t = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    t[_key5] = arguments[_key5];\n  }\n  let [[r, n], a] = f(t),\n    i = {};\n  return e(n, (e, t) => {\n    let n = i[t] = d(t, {\n      parent: U(r),\n      config: a\n    });\n    r.on(n, e), vt(r, n);\n  }), i;\n}\nfunction k(r, n) {\n  let o = ut({\n      or: n,\n      and: 'string' == typeof r ? {\n        name: r\n      } : r\n    }),\n    l = a({\n      family: {\n        type: \"domain\"\n      },\n      regional: 1,\n      parent: (null == o ? void 0 : o.domain) || (null == o ? void 0 : o.parent)\n    }),\n    s = {\n      history: {},\n      graphite: l,\n      hooks: {}\n    };\n  l.meta = kt(\"domain\", s, {\n    parent: (null == o ? void 0 : o.domain) || (null == o ? void 0 : o.parent),\n    or: o\n  }), e({\n    Event: d,\n    Effect: y,\n    Store: p,\n    Domain: k\n  }, (e, r) => {\n    let n = r.toLowerCase(),\n      a = d({\n        named: `on${r}`\n      });\n    s.hooks[n] = a;\n    let o = new Set();\n    s.history[`${n}s`] = o, a.create = e => (i(a, e), e), le(V(a).seq, De((e, t, r) => (r.scope = null, e))), a.watch(e => {\n      be(s, [e]), o.add(e), e.ownerSet || (e.ownerSet = o), U(e) || (e.parent = s);\n    }), be(s, [a]), s[`onCreate${r}`] = e => (t(o, e), a.watch(e)), s[`create${r}`] = s[n] = (t, r) => {\n      let n = ut({\n        and: r,\n        or: t\n      });\n      return null != n && n.domain ? e(t, r) : a(e(t, {\n        parent: s,\n        or: n\n      }));\n    };\n  });\n  let f = U(s);\n  return f && e(s.hooks, (e, t) => ht(e, f.hooks[t])), null != o && o.domain && o.domain.hooks.domain(s), s;\n}\nfunction w(e) {\n  xe(e);\n  let t = R in e ? e[R]() : e;\n  r(t.subscribe, 'expect observable to have .subscribe');\n  let n = d(),\n    a = gt(n);\n  return t.subscribe({\n    next: n,\n    error: a,\n    complete: a\n  }), n;\n}\nfunction S(e, t) {\n  $e(e, 'merge', 'first argument');\n  let r = d({\n    name: o(e, 'merge'),\n    derived: 1,\n    and: t\n  });\n  return ht(e, r, [], 'merge'), r;\n}\nfunction x(e, n) {\n  let a = 0;\n  return t(Mt, t => {\n    t in e && (r(null != e[t], At(n, t)), a = 1);\n  }), a;\n}\nfunction z() {\n  for (var _len6 = arguments.length, e = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    e[_key6] = arguments[_key6];\n  }\n  let t,\n    r,\n    n,\n    a,\n    [[i, o, l], s] = f(e),\n    u = 1;\n  return Se(o) && ke(i) && x(i, \"sample\") && (o = i.clock, l = i.fn, u = !i.greedy, a = i.filter, t = i.target, r = i.name, n = i.sid, i = i.source), It(\"sample\", o, i, a, t, l, r, s, u, 1, 0, n);\n}\nfunction $() {\n  for (var _len7 = arguments.length, e = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    e[_key7] = arguments[_key7];\n  }\n  let [[t, r], n] = f(e);\n  return r || (r = t, t = r.source), x(r, 'guard'), It('guard', r.clock, t, r.filter, r.target, null, r.name, n, !r.greedy, 0, 1);\n}\nfunction j(t, r, n) {\n  if (Z(t)) return se(0, 'restore($store)'), t;\n  if (ee(t) || te(t)) {\n    let e = U(t),\n      a = p(r, {\n        parent: e,\n        name: t.shortName,\n        and: n\n      });\n    return ht(te(t) ? t.doneData : t, a), e && e.hooks.store(a), a;\n  }\n  let a = Array.isArray(t) ? [] : {};\n  return e(t, (e, t) => a[t] = Z(e) ? e : p(e, {\n    name: t\n  })), a;\n}\nfunction C() {\n  for (var _len8 = arguments.length, t = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    t[_key8] = arguments[_key8];\n  }\n  let n,\n    i,\n    o = 'split',\n    [[l, s], c] = f(t),\n    p = !s;\n  p && (n = l.cases, s = l.match, i = l.clock, l = l.source);\n  let m = Z(s),\n    g = !X(s) && we(s),\n    h = !m && !g && ke(s);\n  r(X(l), 'source must be a unit'), n || (n = {}), p ? e(n, (e, t) => je(o, e, `cases.${t}`)) : (r(h, 'match should be an object'), e(s, (e, t) => n[t] = d({\n    derived: 1,\n    and: c\n  })), n.__ = d({\n    derived: 1,\n    and: c\n  }));\n  let y,\n    b = new Set([].concat(l, i || [], Object.values(n))),\n    v = Object.keys(m || g ? n : s);\n  if (m || g) m && b.add(s), y = [m && Ee(B(s), 0, 1), Oe({\n    safe: m,\n    filter: 1,\n    pure: !m,\n    fn(e, t, r) {\n      let n = String(m ? r.a : s(e));\n      Ot(t, ie(v, n) ? n : '__', e, r);\n    }\n  })];else if (h) {\n    let t = _e({});\n    t.type = 'shape';\n    let r,\n      n = [];\n    e(s, (e, a) => {\n      if (X(e)) {\n        r = 1, le(n, a), b.add(e);\n        let i = ht(e, [], [Ee(t), De((e, t, _ref8) => {\n          let {\n            a: r\n          } = _ref8;\n          return r[a] = e;\n        })]);\n        if (Z(e)) {\n          t.current[a] = e.getState();\n          let r = B(e);\n          Le(t, {\n            from: r,\n            field: a,\n            type: 'field'\n          }), u('splitMatchStore', r, i);\n        }\n      }\n    }), r && u('splitBase', t), y = [r && Ee(t, 0, 1), Re((e, t, r) => {\n      for (let a = 0; a < v.length; a++) {\n        let i = v[a];\n        if (ie(n, i) ? r.a[i] : s[i](e)) return void Ot(t, i, e, r);\n      }\n      Ot(t, '__', e, r);\n    }, 1)];\n  } else r(0, 'expect match to be unit, function or object');\n  let k = a({\n    meta: {\n      op: o\n    },\n    parent: i ? [] : l,\n    scope: n,\n    node: y,\n    family: {\n      owners: Array.from(b)\n    },\n    regional: 1\n  });\n  if (i && It(o, i, l, null, k, null, o, c, 0, 0, 0), !p) return n;\n}\nfunction M(e) {\n  let {\n    scope: t,\n    params: r\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!X(e)) return Promise.reject(new Error('first argument should be unit'));\n  if (!(te(e) || ee(e) || Z(e) || ne(e))) return Promise.reject(new Error('first argument accepts only effects, events, stores or scopes'));\n  ne(e) && (t = e);\n  let n = h();\n  n.parentFork = Xe;\n  let {\n    fxCount: a\n  } = t;\n  le(a.scope.defers, n);\n  let o = [],\n    l = [];\n  return ne(e) || (le(o, e), le(l, te(e) ? {\n    params: r,\n    req: {\n      rs(e) {\n        n.value = {\n          status: 'done',\n          value: e\n        };\n      },\n      rj(e) {\n        n.value = {\n          status: 'fail',\n          value: e\n        };\n      }\n    }\n  } : r)), le(o, a), le(l, null), i({\n    target: o,\n    params: l,\n    scope: t\n  }), n.req;\n}\nfunction A(e, r) {\n  let n = [];\n  (function e(a) {\n    ie(n, a) || (le(n, a), \"store\" === J(a, 'op') && J(a, 'sid') && r(a, J(a, 'sid')), t(a.next, e), t(L(a), e), t(T(a), e));\n  })(e);\n}\nfunction I(e, n) {\n  let a = Array.isArray(e) ? new Map(e) : e;\n  if (a instanceof Map) {\n    let e = {};\n    return t(a, (t, a) => {\n      r(X(a), 'Map key should be a unit'), n && n(a, t), r(a.sid, 'unit should have a sid'), r(!(a.sid in e), 'duplicate sid found'), e[a.sid] = t;\n    }), e;\n  }\n  return a;\n}\nfunction q(e, n) {\n  let i,\n    o = e;\n  re(e) && (i = e, o = n);\n  let l = (e => {\n    let r = a({\n        scope: {\n          defers: [],\n          inFlight: 0,\n          fxID: 0\n        },\n        node: [De((e, t, r) => {\n          U(r) ? 'dec' === J(U(r).node, 'needFxCounter') ? t.inFlight -= 1 : (t.inFlight += 1, t.fxID += 1) : t.fxID += 1;\n        }), Oe({\n          priority: \"sampler\",\n          batch: 1\n        }), De((e, r) => {\n          let {\n            defers: n,\n            fxID: a\n          } = r;\n          r.inFlight > 0 || 0 === n.length || Promise.resolve().then(() => {\n            r.fxID === a && t(n.splice(0, n.length), e => {\n              rt(e.parentFork), e.rs(e.value);\n            });\n          });\n        }, 0, 1)]\n      }),\n      n = a({\n        node: [De((e, t, r) => {\n          let n = U(r);\n          if (n) {\n            let t = n.node;\n            if (!J(t, 'isCombine') || U(n) && 'combine' !== J(U(n).node, 'op')) {\n              let n = G(r),\n                a = t.scope.state.id,\n                i = J(t, 'sid');\n              n.sidIdMap[i] = a, n.sidValuesMap[i] = e;\n              let o = J(t, 'serialize');\n              o && n.sidSerializeSettings.set(i, 'ignore' === o ? {\n                ignore: 1\n              } : {\n                ignore: 0,\n                write: o.write\n              });\n            }\n          }\n        })]\n      }),\n      i = a({\n        node: [De((e, t, r) => {\n          let n = G(r);\n          if (n) {\n            let e = U(r);\n            e && (!J(e.node, 'isCombine') || U(e) && 'combine' !== J(U(e).node, 'op')) && (n.warnSerialize = 1);\n          }\n        })]\n      }),\n      o = {\n        cloneOf: e,\n        reg: {},\n        sidValuesMap: {},\n        sidIdMap: {},\n        sidSerializeSettings: new Map(),\n        getState(e) {\n          if ('current' in e) return ot(tt, o, null, e).current;\n          let t = V(e);\n          return ot(tt, o, t, t.scope.state, 1).current;\n        },\n        kind: \"scope\",\n        graphite: a({\n          family: {\n            type: \"domain\",\n            links: [r, n, i]\n          },\n          meta: {\n            unit: 'fork'\n          },\n          scope: {\n            forkInFlightCounter: r\n          }\n        }),\n        additionalLinks: {},\n        handlers: {},\n        fxCount: r,\n        storeChange: n,\n        warnSerializeNode: i,\n        activeEffects: []\n      };\n    return o;\n  })(i);\n  if (o) {\n    let e = o.scope;\n    if (e) {\n      let r = e.activeEffects;\n      e.activeEffects = [], l.activeEffects = r, t(r, e => e.ref = l);\n    }\n    if (o.values) {\n      let e = I(o.values, e => r(Z(e), 'Values map can contain only stores as keys'));\n      Object.assign(l.sidValuesMap, e), l.fromSerialize = !(Array.isArray(o.values) || o.values instanceof Map);\n    }\n    o.handlers && (l.handlers = I(o.handlers, e => r(te(e), \"Handlers map can contain only effects as keys\")));\n  }\n  return l;\n}\nfunction N(e, _ref9) {\n  let {\n    values: t\n  } = _ref9;\n  r(ke(t), 'values property should be an object');\n  let n,\n    a,\n    o,\n    l = I(t),\n    s = Object.getOwnPropertyNames(l),\n    f = [],\n    u = [];\n  ne(e) ? (n = e, o = 1, r(n.cloneOf, 'scope should be created from domain'), a = V(n.cloneOf)) : re(e) ? a = V(e) : r(0, 'first argument of hydrate should be domain or scope'), A(a, (e, t) => {\n    if (ie(s, t)) {\n      le(f, e);\n      let r = J(e, 'serialize');\n      r && 'ignore' !== r && (l[t] = r.read(l[t])), le(u, l[t]);\n    }\n  }), i({\n    target: f,\n    params: u,\n    scope: n\n  }), o && Object.assign(n.sidValuesMap, l);\n}\nfunction O(e) {\n  let {\n    scope: t,\n    safe: n\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  r(t || Xe || n, 'scopeBind cannot be called outside of forked .watch');\n  let a = t || Xe;\n  return te(e) ? t => {\n    let r = h();\n    return i({\n      target: e,\n      params: {\n        params: t,\n        req: r\n      },\n      scope: a\n    }), r.req;\n  } : t => (i({\n    target: e,\n    params: t,\n    scope: a\n  }), t);\n}\nfunction F(t) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  t.warnSerialize && console.error('There is a store without sid in this scope, its value is omitted');\n  let a = n.ignore ? n.ignore.map(_ref10 => {\n      let {\n        sid: e\n      } = _ref10;\n      return e;\n    }) : [],\n    i = {};\n  return e(t.sidValuesMap, (e, r) => {\n    var n;\n    if (ie(a, r)) return;\n    let o = t.sidIdMap[r],\n      l = null !== (n = t.sidSerializeSettings.get(r)) && void 0 !== n ? n : {\n        ignore: 0,\n        write: Dt\n      };\n    l.ignore || (i[r] = (0, l.write)(o && o in t.reg ? t.reg[o].current : e));\n  }), 'onlyChanges' in n && !n.onlyChanges && (r(t.cloneOf, 'scope should be created from domain'), A(V(t.cloneOf), (e, r) => {\n    r in i || ie(a, r) || J(e, 'isCombine') || 'ignore' === J(e, 'serialize') || (i[r] = t.getState(e));\n  })), i;\n}\nfunction D(_ref11) {\n  let {\n    unit: e,\n    fn: t,\n    scope: r\n  } = _ref11;\n  let n = [Pe.run({\n    fn: e => t(e)\n  })];\n  if (r) {\n    let t = a({\n        node: n\n      }),\n      i = e.graphite.id,\n      o = r.additionalLinks,\n      l = o[i] || [];\n    return o[i] = l, l.push(t), E(() => {\n      let e = l.indexOf(t);\n      -1 !== e && l.splice(e, 1), mt(t);\n    });\n  }\n  {\n    let t = a({\n      node: n,\n      parent: [e],\n      family: {\n        owners: e\n      }\n    });\n    return E(() => {\n      mt(t);\n    });\n  }\n}\nfunction E(e) {\n  let t = () => e();\n  return t.unsubscribe = () => e(), t;\n}\nlet R = 'undefined' != typeof Symbol && Symbol.observable || '@@observable',\n  P = 'map',\n  _ = 'stack',\n  V = e => e.graphite || e,\n  L = e => e.family.owners,\n  T = e => e.family.links,\n  B = e => e.stateRef,\n  W = e => e.value,\n  H = e => e.subscribers,\n  U = e => e.parent,\n  G = e => e.scope,\n  J = (e, t) => V(e).meta[t],\n  K = (e, t, r) => V(e).meta[t] = r,\n  Q = e => e.compositeName,\n  X = e => (we(e) || ke(e)) && 'kind' in e;\nconst Y = e => t => X(t) && t.kind === e;\nlet Z = Y(\"store\"),\n  ee = Y(\"event\"),\n  te = Y(\"effect\"),\n  re = Y(\"domain\"),\n  ne = Y(\"scope\");\nvar ae = {\n  __proto__: null,\n  unit: X,\n  store: Z,\n  event: ee,\n  effect: te,\n  domain: re,\n  scope: ne,\n  attached: e => te(e) && 1 == J(e, 'attached')\n};\nlet ie = (e, t) => e.includes(t),\n  oe = (e, t) => {\n    let r = e.indexOf(t);\n    -1 !== r && e.splice(r, 1);\n  },\n  le = (e, t) => e.push(t),\n  se = (e, t, r) => !e && console.error(`${t} is deprecated${r ? `, use ${r} instead` : ''}`);\nconst fe = () => {\n  let e = 0;\n  return () => \"\" + ++e;\n};\nlet ue = fe(),\n  de = fe(),\n  ce = fe(),\n  pe = fe(),\n  me = null,\n  ge = () => me && me.template,\n  he = e => (e && me && me.sidRoot && (e = `${me.sidRoot}|${e}`), e),\n  ye = _ref12 => {\n    let {\n      sid: e,\n      name: t,\n      loc: r,\n      method: i,\n      fn: o\n    } = _ref12;\n    return n(a({\n      meta: {\n        sidRoot: he(e),\n        name: t,\n        loc: r,\n        method: i\n      }\n    }), o);\n  },\n  be = (e, r) => {\n    let n = V(e);\n    t(r, e => {\n      let t = V(e);\n      \"domain\" !== n.family.type && (t.family.type = \"crosslink\"), le(L(t), n), le(T(n), t);\n    });\n  },\n  ve = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return (Array.isArray(e) ? e : [e]).flat().map(V);\n  },\n  ke = e => 'object' == typeof e && null !== e,\n  we = e => 'function' == typeof e,\n  Se = e => void 0 === e,\n  xe = e => r(ke(e) || we(e), 'expect first argument be an object');\nconst ze = (e, t, n, a) => r(!(!ke(e) && !we(e) || !('family' in e) && !('graphite' in e)), `${t}: expect ${n} to be a unit (store, event or effect)${a}`);\nlet $e = (e, r, n) => {\n    Array.isArray(e) ? t(e, (e, t) => ze(e, r, `${t} item of ${n}`, '')) : ze(e, r, n, ' or array of units');\n  },\n  je = function (e, r) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"target\";\n    return t(ve(r), t => se(!J(t, 'derived'), `${e}: derived unit in \"${n}\"`, \"createEvent/createStore\"));\n  },\n  Ce = (e, _ref13, _ref14) => {\n    let {\n      fn: t\n    } = _ref13;\n    let {\n      a: r\n    } = _ref14;\n    return t(e, r);\n  },\n  Me = (e, _ref15, _ref16) => {\n    let {\n      fn: t\n    } = _ref15;\n    let {\n      a: r\n    } = _ref16;\n    return t(r, e);\n  },\n  Ae = (e, _ref17) => {\n    let {\n      fn: t\n    } = _ref17;\n    return t(e);\n  };\nconst Ie = (e, t, r, n) => {\n  let a = {\n    id: de(),\n    type: e,\n    data: t\n  };\n  return r && (a.order = {\n    priority: r\n  }, n && (a.order.barrierID = ++qe)), a;\n};\nlet qe = 0,\n  Ne = _ref18 => {\n    let {\n      from: e = \"store\",\n      store: t,\n      target: r,\n      to: n = r ? \"store\" : _,\n      batch: a,\n      priority: i\n    } = _ref18;\n    return Ie('mov', {\n      from: e,\n      store: t,\n      to: n,\n      target: r\n    }, i, a);\n  },\n  Oe = _ref19 => {\n    let {\n      fn: e,\n      batch: t,\n      priority: r,\n      safe: n = 0,\n      filter: a = 0,\n      pure: i = 0\n    } = _ref19;\n    return Ie('compute', {\n      fn: e,\n      safe: n,\n      filter: a,\n      pure: i\n    }, r, t);\n  },\n  Fe = _ref20 => {\n    let {\n      fn: e\n    } = _ref20;\n    return Oe({\n      fn: e,\n      priority: \"effect\"\n    });\n  },\n  De = (e, t, r) => Oe({\n    fn: e,\n    safe: 1,\n    filter: t,\n    priority: r && \"effect\"\n  }),\n  Ee = (e, t, r) => Ne({\n    store: e,\n    to: t ? _ : \"a\",\n    priority: r && \"sampler\",\n    batch: 1\n  }),\n  Re = function () {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Ae;\n    let t = arguments.length > 1 ? arguments[1] : undefined;\n    return Oe({\n      fn: e,\n      pure: 1,\n      filter: t\n    });\n  },\n  Pe = {\n    mov: Ne,\n    compute: Oe,\n    filter: _ref21 => {\n      let {\n        fn: e,\n        pure: t\n      } = _ref21;\n      return Oe({\n        fn: e,\n        filter: 1,\n        pure: t\n      });\n    },\n    run: Fe\n  },\n  _e = e => ({\n    id: de(),\n    current: e\n  }),\n  Ve = _ref22 => {\n    let {\n      current: e\n    } = _ref22;\n    return e;\n  },\n  Le = (e, t) => {\n    e.before || (e.before = []), le(e.before, t);\n  },\n  Te = null;\nconst Be = (e, t) => {\n    if (!e) return t;\n    if (!t) return e;\n    let r;\n    return (e.v.type === t.v.type && e.v.id > t.v.id || Ke(e.v.type) > Ke(t.v.type)) && (r = e, e = t, t = r), r = Be(e.r, t), e.r = e.l, e.l = r, e;\n  },\n  We = [];\nlet He = 0;\nfor (; He < 6;) le(We, {\n  first: null,\n  last: null,\n  size: 0\n}), He += 1;\nconst Ue = () => {\n    for (let e = 0; e < 6; e++) {\n      let t = We[e];\n      if (t.size > 0) {\n        if (3 === e || 4 === e) {\n          t.size -= 1;\n          let e = Te.v;\n          return Te = Be(Te.l, Te.r), e;\n        }\n        1 === t.size && (t.last = null);\n        let r = t.first;\n        return t.first = r.r, t.size -= 1, r.v;\n      }\n    }\n  },\n  Ge = (e, t, r, n, a, i, o) => Je(0, {\n    a: null,\n    b: null,\n    node: r,\n    parent: n,\n    value: a,\n    page: t,\n    scope: i,\n    meta: o\n  }, e),\n  Je = function (e, t, r) {\n    let n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let a = Ke(r),\n      i = We[a],\n      o = {\n        v: {\n          idx: e,\n          stack: t,\n          type: r,\n          id: n\n        },\n        l: null,\n        r: null\n      };\n    3 === a || 4 === a ? Te = Be(Te, o) : (0 === i.size ? i.first = o : i.last.r = o, i.last = o), i.size += 1;\n  },\n  Ke = e => {\n    switch (e) {\n      case 'child':\n        return 0;\n      case 'pure':\n        return 1;\n      case 'read':\n        return 2;\n      case \"barrier\":\n        return 3;\n      case \"sampler\":\n        return 4;\n      case \"effect\":\n        return 5;\n      default:\n        return -1;\n    }\n  },\n  Qe = new Set();\nlet Xe,\n  Ye = 1,\n  Ze = 0,\n  et = 0,\n  tt = null,\n  rt = e => {\n    Xe = e;\n  },\n  nt = e => {\n    tt = e;\n  };\nconst at = (e, t) => {\n  if (e) {\n    for (; e && !e.reg[t];) e = U(e);\n    if (e) return e;\n  }\n  return null;\n};\nlet ot = (e, t, r, n, a) => {\n  let i = at(e, n.id);\n  return i ? i.reg[n.id] : t ? (st(t, n, a), t.reg[n.id]) : n;\n};\nconst lt = e => e;\nlet st = (e, r, n, a, i) => {\n  var o;\n  let l = e.reg,\n    s = r.sid,\n    f = null == r || null === (o = r.meta) || void 0 === o ? void 0 : o.serialize;\n  if (l[r.id]) return;\n  let u = {\n    id: r.id,\n    current: r.current,\n    meta: r.meta\n  };\n  if (s && s in e.sidValuesMap && !(s in e.sidIdMap)) u.current = (e.fromSerialize && 'ignore' !== f && (null == f ? void 0 : f.read) || lt)(e.sidValuesMap[s]);else if (r.before && !i) {\n    let i = 0,\n      o = n || !r.noInit || a;\n    t(r.before, t => {\n      switch (t.type) {\n        case P:\n          {\n            let r = t.from;\n            if (r || t.fn) {\n              r && st(e, r, n, a);\n              let i = r && l[r.id].current;\n              o && (u.current = t.fn ? t.fn(i) : i);\n            }\n            break;\n          }\n        case 'field':\n          i || (i = 1, u.current = Array.isArray(u.current) ? [...u.current] : {\n            ...u.current\n          }), st(e, t.from, n, a), o && (u.current[t.field] = l[l[t.from.id].id].current);\n      }\n    });\n  }\n  s && (e.sidIdMap[s] = r.id), l[r.id] = u;\n};\nconst ft = (e, t, r) => {\n  try {\n    return t(W(r), e.scope, r);\n  } catch (t) {\n    console.error(t), e.fail = 1;\n  }\n};\nlet ut = function (t) {\n  let r = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return ke(t) && (ut(t.or, r), e(t, (e, t) => {\n    Se(e) || 'or' === t || 'and' === t || (r[t] = e);\n  }), ut(t.and, r)), r;\n};\nconst dt = (e, t) => {\n    oe(e.next, t), oe(L(e), t), oe(T(e), t);\n  },\n  ct = (e, t, r) => {\n    let n;\n    e.next.length = 0, e.seq.length = 0, e.scope = null;\n    let a = T(e);\n    for (; n = a.pop();) dt(n, e), (t || r && 'sample' !== J(e, 'op') || \"crosslink\" === n.family.type) && ct(n, t, 'on' !== J(n, 'op') && r);\n    for (a = L(e); n = a.pop();) dt(n, e), r && \"crosslink\" === n.family.type && ct(n, t, 'on' !== J(n, 'op') && r);\n  },\n  pt = e => e.clear();\nlet mt = function (e) {\n    let {\n      deep: t\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let r = 0;\n    if (e.ownerSet && e.ownerSet.delete(e), Z(e)) pt(H(e));else if (re(e)) {\n      r = 1;\n      let t = e.history;\n      pt(t.events), pt(t.effects), pt(t.stores), pt(t.domains);\n    }\n    ct(V(e), !!t, r);\n  },\n  gt = e => {\n    let t = () => mt(e);\n    return t.unsubscribe = t, t;\n  },\n  ht = (e, t, r, n, i) => a({\n    node: r,\n    parent: e,\n    child: t,\n    scope: {\n      fn: i\n    },\n    meta: {\n      op: n\n    },\n    family: {\n      owners: [e, t],\n      links: t\n    },\n    regional: 1\n  }),\n  yt = e => {\n    let t = 'forward',\n      [{\n        from: r,\n        to: n\n      }, i] = f(e, 1);\n    return $e(r, t, '\"from\"'), $e(n, t, '\"to\"'), je(t, n, 'to'), gt(a({\n      parent: r,\n      child: n,\n      meta: {\n        op: t,\n        config: i\n      },\n      family: {},\n      regional: 1\n    }));\n  },\n  bt = (e, t) => (r(we(t), '.watch argument should be a function'), gt(a({\n    scope: {\n      fn: t\n    },\n    node: [Fe({\n      fn: Ae\n    })],\n    parent: e,\n    meta: {\n      op: 'watch'\n    },\n    family: {\n      owners: e\n    },\n    regional: 1\n  }))),\n  vt = function (e, t) {\n    let r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"event\";\n    U(e) && U(e).hooks[r](t);\n  },\n  kt = (e, t, r) => {\n    let n = ut(r),\n      a = \"domain\" === e,\n      i = ue(),\n      {\n        sid: o = null,\n        named: l = null,\n        domain: f = null,\n        parent: u = f\n      } = n,\n      d = l || n.name || (a ? '' : i),\n      c = s(d, u),\n      p = {\n        op: t.kind = e,\n        name: t.shortName = d,\n        sid: t.sid = he(o),\n        named: l,\n        unitId: t.id = i,\n        serialize: n.serialize,\n        derived: n.derived,\n        config: n\n      };\n    if (t.parent = u, t.compositeName = c, t.defaultConfig = n, t.thru = e => (se(0, 'thru', 'js pipe'), e(t)), t.getType = () => c.fullName, !a) {\n      t.subscribe = e => (xe(e), t.watch(we(e) ? e : t => e.next && e.next(t))), t[R] = () => t;\n      let e = ge();\n      e && (p.nativeTemplate = e);\n    }\n    return p;\n  };\nconst wt = (e, t, r, n) => {\n    let a;\n    ke(r) && (a = r, r = r.fn);\n    let i = d({\n      name: `${e.shortName} \\u2192 *`,\n      derived: 1,\n      and: a\n    });\n    return ht(e, i, n, t, r), i;\n  },\n  St = (e, t, r, n, a) => {\n    let i = B(t),\n      o = Ne({\n        store: i,\n        to: \"a\",\n        priority: 'read'\n      });\n    r === P && (o.data.softRead = 1);\n    let l = [o, Re(n)];\n    return u('storeOnMap', i, l, Z(e) && B(e)), ht(e, t, l, r, a);\n  },\n  xt = (t, n, a, i, l) => {\n    let s = t ? e => [...e] : e => ({\n        ...e\n      }),\n      f = t ? [] : {},\n      d = s(f),\n      c = _e(d),\n      m = _e(1);\n    c.type = t ? 'list' : 'shape', c.noInit = 1, u('combineBase', c, m);\n    let g = p(d, {\n        name: o(a),\n        derived: 1,\n        and: i\n      }),\n      h = B(g);\n    h.noInit = 1, K(g, 'isCombine', 1);\n    let y = Ee(c);\n    y.order = {\n      priority: 'barrier'\n    };\n    let b = [De((e, t, r) => (r.scope && !r.scope.reg[c.id] && (r.c = 1), e)), y, Ne({\n      store: m,\n      to: 'b'\n    }), De((e, _ref23, r) => {\n      let {\n        key: t\n      } = _ref23;\n      if (r.c || e !== r.a[t]) return n && r.b && (r.a = s(r.a)), r.a[t] = e, 1;\n    }, 1), Ne({\n      from: \"a\",\n      target: c\n    }), Ne({\n      from: \"value\",\n      store: 0,\n      target: m\n    }), Ne({\n      from: \"value\",\n      store: 1,\n      target: m,\n      priority: \"barrier\",\n      batch: 1\n    }), Ee(c, 1), l && Re()];\n    return e(a, (e, t) => {\n      if (!Z(e)) return r(!X(e) && !Se(e), `combine expects a store in a field ${t}`), void (d[t] = f[t] = e);\n      f[t] = e.defaultState, d[t] = e.getState();\n      let n = ht(e, g, b, 'combine', l);\n      n.scope.key = t;\n      let a = B(e);\n      Le(c, {\n        type: 'field',\n        field: t,\n        from: a\n      }), u('combineField', a, n);\n    }), g.defaultShape = a, Le(h, {\n      type: P,\n      from: c,\n      fn: l\n    }), ge() || (g.defaultState = l ? h.current = l(d) : f), g;\n  };\nlet zt = (e, t, r) => {\n    try {\n      return [1, e(...r)];\n    } catch (e) {\n      return t(e), [0, null];\n    }\n  },\n  $t = e => {\n    let t = G(e),\n      r = {\n        ref: t\n      };\n    return t && le(t.activeEffects, r), r;\n  },\n  jt = (e, t, r, n, a, o) => l => {\n    o.ref && oe(o.ref.activeEffects, o), i({\n      target: [n, Ct],\n      params: [r ? {\n        status: 'done',\n        params: e,\n        result: l\n      } : {\n        status: 'fail',\n        params: e,\n        error: l\n      }, {\n        value: l,\n        fn: r ? t.rs : t.rj\n      }],\n      defer: 1,\n      page: a.page,\n      scope: o.ref,\n      meta: a.meta\n    });\n  };\nconst Ct = a({\n    node: [Fe({\n      fn: _ref24 => {\n        let {\n          fn: e,\n          value: t\n        } = _ref24;\n        return e(t);\n      }\n    })],\n    meta: {\n      op: 'fx',\n      fx: 'sidechain'\n    }\n  }),\n  Mt = ['source', 'clock', 'target'],\n  At = (e, t) => e + `: ${t} should be defined`;\nlet It = (e, t, n, a, i, o, l, s, f, c, g, h) => {\n  let y = !!i;\n  r(!Se(n) || !Se(t), At(e, 'either source or clock'));\n  let b = 0;\n  Se(n) ? b = 1 : X(n) || (n = m(n)), Se(t) ? t = n : ($e(t, e, 'clock'), Array.isArray(t) && (t = S(t))), b && (n = t), s || l || (l = n.shortName);\n  let v = 'none';\n  (g || a) && (X(a) ? v = 'unit' : (r(we(a), '`filter` should be function or unit'), v = 'fn')), i ? ($e(i, e, 'target'), je(e, i)) : 'none' === v && c && Z(n) && Z(t) ? i = p(o ? o(Ve(B(n)), Ve(B(t))) : Ve(B(n)), {\n    name: l,\n    sid: h,\n    or: s\n  }) : (i = d({\n    name: l,\n    derived: 1,\n    or: s\n  }), u('sampleTarget', V(i)));\n  let k = _e(),\n    w = [];\n  if ('unit' === v) {\n    let [r, n] = Nt(a, i, t, k, e);\n    w = [...qt(n), ...qt(r)];\n  }\n  let [x, z] = Nt(n, i, t, k, e),\n    $ = ht(t, i, [u('sampleSourceLoader'), Ne({\n      from: _,\n      target: k\n    }), ...qt(z), Ee(x, 1, f), ...w, Ee(k), 'fn' === v && Re((e, t, _ref25) => {\n      let {\n        a: r\n      } = _ref25;\n      return a(e, r);\n    }, 1), o && Re(Ce), u('sampleSourceUpward', y)], e, o);\n  return be(n, [$]), Object.assign($.meta, s, {\n    joint: 1\n  }), i;\n};\nconst qt = e => [Ee(e), De((e, t, _ref26) => {\n    let {\n      a: r\n    } = _ref26;\n    return r;\n  }, 1)],\n  Nt = (e, t, r, n, i) => {\n    let o = Z(e),\n      l = o ? B(e) : _e(),\n      s = _e(o);\n    return o || a({\n      parent: e,\n      node: [Ne({\n        from: _,\n        target: l\n      }), Ne({\n        from: \"value\",\n        store: 1,\n        target: s\n      })],\n      family: {\n        owners: [e, t, r],\n        links: t\n      },\n      meta: {\n        op: i\n      },\n      regional: 1\n    }), u('sampleSource', s, l, n), [l, s];\n  },\n  Ot = (e, t, r, n) => {\n    let a = e[t];\n    a && i({\n      target: a,\n      params: Array.isArray(a) ? a.map(() => r) : r,\n      defer: 1,\n      stack: n\n    });\n  },\n  Ft = \"22.5.2\",\n  Dt = e => e;\nexport { M as allSettled, b as attach, mt as clearNode, m as combine, v as createApi, k as createDomain, y as createEffect, d as createEvent, a as createNode, p as createStore, g as createStoreObject, D as createWatch, q as fork, yt as forward, w as fromObservable, $ as guard, N as hydrate, ae as is, i as launch, S as merge, j as restore, z as sample, O as scopeBind, F as serialize, l as setStoreName, C as split, Pe as step, Ft as version, ye as withFactory, n as withRegion };","map":{"version":3,"names":["e","t","r","forEach","Error","n","me","parent","value","template","J","ge","sidRoot","U","a","node","from","source","to","i","target","o","child","l","scope","s","meta","f","family","u","type","regional","d","arguments","length","undefined","c","ve","p","links","m","owners","g","le","h","id","ce","seq","next","L","T","be","W","tt","Xe","params","defer","page","stack","G","Array","isArray","Ge","V","Ye","isRoot","currentPage","isWatch","Ze","isPure","et","Ue","idx","reg","fail","order","priority","barrierID","fullID","Qe","has","add","Je","delete","data","_","store","at","st","softRead","Ve","ot","current","fn","pure","safe","ft","filter","fxCount","storeChange","warnSerializeNode","additionalLinks","X","Q","fullName","toString","shortName","Object","assign","path","concat","xe","or","and","ke","handlers","_len","_key","ut","name","event","_len2","_key2","se","nt","create","graphite","kt","watch","bt","map","wt","P","Re","Ae","filterMap","De","Se","prepend","ht","vt","domain","hooks","$e","we","off","H","set","gt","St","Me","_e","named","derived","subscribers","Map","updates","defaultState","stateRef","getState","setState","reset","_len3","_key3","on","get","Ce","Le","B","noInit","defaultConfig","updateFilter","state","b","Ee","_ref","Ne","y","v","k","w","K","sid","serialize","reinit","_len4","_key4","slice","Z","xt","req","Promise","rs","rj","catch","handler","kind","use","getCurrent","finally","done","_ref2","status","result","_ref3","error","doneData","_ref4","failData","_ref5","handlerId","getType","_ref6","args","$t","jt","zt","then","op","fx","runner","_ref7","fxID","pe","rt","inFlight","pending","effect","mapParams","te","splice","_len5","_key5","config","history","Event","Effect","Store","Domain","toLowerCase","Set","ownerSet","R","subscribe","complete","S","x","Mt","At","z","_len6","_key6","clock","greedy","It","$","_len7","_key7","j","ee","C","_len8","_key8","cases","match","je","__","values","keys","Oe","String","Ot","ie","_ref8","field","M","reject","ne","parentFork","defers","A","I","q","re","batch","resolve","sidIdMap","sidValuesMap","sidSerializeSettings","ignore","write","warnSerialize","cloneOf","unit","forkInFlightCounter","activeEffects","ref","fromSerialize","N","_ref9","getOwnPropertyNames","read","O","F","console","_ref10","Dt","onlyChanges","D","_ref11","Pe","run","push","E","indexOf","mt","subscription","unsubscribe","Symbol","observable","getMeta","setMeta","compositeName","Y","ae","__proto__","attached","includes","oe","removeItem","deprecate","fe","idCount","ue","de","readTemplate","he","ye","_ref12","loc","method","own","arrifyNodes","flat","ze","assertNodeSetItem","assertNodeSet","assertTarget","callStackAReg","_ref13","_ref14","callARegStack","_ref15","_ref16","callStack","_ref17","Ie","cmd","qe","_ref18","_ref19","Fe","_ref20","calc","userFnCall","mov","compute","_ref21","_ref22","addRefOp","before","Te","Be","merge","Ke","We","He","first","last","size","deleteMin","pushFirstHeapItem","pushHeap","getPageForRef","getPageRef","lt","initRefInScope","tryRun","flattenConfig","dt","removeFromNode","ct","clearNodeNormalized","pop","pt","clear","clearNode","deep","events","effects","stores","domains","createLinkNode","yt","watchUnit","applyParentHook","initUnit","unitId","thru","nativeTemplate","deriveEvent","updateStore","storeCombination","_ref23","key","defaultShape","runFn","onSettled","Ct","_ref24","fieldErrorMessage","createSampling","Nt","qt","_ref25","joint","_ref26","syncSourceState","launchCase","Ft","allSettled","attach","combine","createApi","createDomain","createEffect","createEvent","createNode","createStore","createStoreObject","createWatch","fork","forward","fromObservable","guard","hydrate","is","launch","restore","sample","scopeBind","setStoreName","split","step","version","withFactory","withRegion"],"sources":["/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/collection.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/throw.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/region.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/createNode.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/tag.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/kernel.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/naming.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/config.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/template.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/createUnit.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/combine.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/defer.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/createEffect.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/attach.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/createApi.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/createDomain.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fromObservable.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/merge.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/sample.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/guard.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/restore.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/split.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fork/allSettled.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fork/util.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fork/fork.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fork/createScope.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fork/hydrate.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fork/scopeBind.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/fork/serialize.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/createWatch.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/observable.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/getter.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/validate.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/id.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/own.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/is.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/caller.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/step.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/stateRef.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/clearNode.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/subscription.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/forward.ts","/Users/ilakolmakov/kolmakov-ilya-nodejs-otus/nodejs-4/my-courses/client/node_modules/effector/effector/watch.ts"],"sourcesContent":["export function forIn<T, Key extends string = string>(\n  obj: Record<Key, T>,\n  cb: (value: T, key: Key) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = <T>(list: T[], item: T) => list.includes(item)\n\nexport const removeItem = <T>(list: T[], item: T) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport const add = <T>(list: T[], item: T) => list.push(item)\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<K, T>(\n  list: Map<K, T>,\n  fn: (item: T, key: K) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","export function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) throw Error(message)\n}\n\nexport const deprecate = (\n  condition: unknown,\n  subject: string,\n  suggestion?: string,\n) =>\n  !condition &&\n  console.error(\n    `${subject} is deprecated${\n      suggestion ? `, use ${suggestion} instead` : ''\n    }`,\n  )\n","import type {Template} from '../forest/index.h'\nimport type {NodeUnit} from './index.h'\nimport {getParent, getMeta} from './getter'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: Template | null\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = (): Template | null =>\n  regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}|${sid}`\n  return sid\n}\n\nexport function withRegion(unit: NodeUnit, cb: () => void) {\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: getMeta(unit, 'template') || readTemplate(),\n    sidRoot: getMeta(unit, 'sidRoot') || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {sidRoot: readSidRoot(sid), name, loc, method},\n  })\n  return withRegion(sidNode, fn)\n}\n","import type {Node, NodeUnit, Cmd} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\nimport {add, forEach} from './collection'\n\nexport const arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => (Array.isArray(list) ? list : [list]).flat().map(getGraph)\n\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  forEach(node, item => item && add(seq, item))\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n  }\n  forEach(links, link => add(getOwners(link), result))\n  forEach(owners, owner => add(getLinks(owner), result))\n  forEach(sources, source => add(source.next, result))\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SCOPE = 'scope'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import type {Leaf} from '../forest/index.h'\n\nimport type {Node, NodeUnit, StateRef, Stack} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getMeta, getParent, getValue} from './getter'\nimport {STORE, EFFECT, SAMPLER, STACK, BARRIER, VALUE, REG_A, MAP} from './tag'\nimport type {Scope} from './unit.h'\nimport {add, forEach} from './collection'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'read' | 'barrier' | 'sampler' | 'effect'\n\nexport type BarrierPriorityTag = 'read' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (a.v.type === b.v.type && a.v.id > b.v.id) ||\n    /**\n     * greater priority mean bucket of first node is executed later\n     * e.g  a: \"sampler\", b: \"barrier\"\n     */\n    getPriority(a.v.type) > getPriority(b.v.type)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 6) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  add(queue, {first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 6; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * bucket 3 is for \"barrier\" PriorityType (used in combine)\n       * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 3 || i === 4) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: Leaf | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  scope?: Scope | null | void,\n  meta?: Record<string, any> | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      scope,\n      meta,\n    },\n    type,\n  )\nconst pushHeap = (\n  idx: number,\n  stack: Stack,\n  type: PriorityTag,\n  id: number = 0,\n) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    l: null,\n    r: null,\n  }\n  /**\n   * bucket 3 is for \"barrier\" PriorityType (used in combine)\n   * bucket 4 is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 3 || priority === 4) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case 'read':\n      return 2\n    case BARRIER:\n      return 3\n    case SAMPLER:\n      return 4\n    case EFFECT:\n      return 5\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set<string | number>()\n\nlet isRoot = true\nexport let isWatch = false\nexport let isPure = false\nexport let currentPage: Leaf | null = null\nexport let forkPage: Scope | void | null\nexport const setForkPage = (newForkPage: Scope | void | null) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: Leaf | null) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: Leaf | null, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nexport const getPageRef = (\n  page: Leaf | null,\n  forkPage: Scope | null | void,\n  node: Node | null,\n  ref: StateRef,\n  isGetState?: boolean,\n) => {\n  const pageForRef = getPageForRef(page, ref.id)\n  if (pageForRef) return pageForRef.reg[ref.id]\n  if (forkPage) {\n    initRefInScope(forkPage!, ref, isGetState)\n    return forkPage.reg[ref.id]\n  }\n  return ref\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: Leaf | void | null\n  scope?: Scope | void | null\n  stack?: Stack | void\n  meta?: Record<string, any> | void\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  let meta: Record<string, any> | void\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    meta = unit.meta\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n        meta,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n      meta,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {\n    isRoot,\n    currentPage,\n    scope: forkPage,\n    isWatch,\n    isPure,\n  }\n  isRoot = false\n  let stop: boolean\n  let skip: boolean\n  let node: Node\n  let value: Layer | undefined\n  let page: Leaf | null\n  let reg: Record<string, StateRef> | void\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    if (page) reg = page.reg\n    else if (forkPage) reg = forkPage.reg\n    // reg = (page ? page : forkPage ? forkPage : node).reg\n    const hasPageReg = !!page\n    const hasScopeReg = !!forkPage\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      if (step.order) {\n        const {priority, barrierID} = step.order\n        const id = barrierID\n          ? page\n            ? `${page.fullID}_${barrierID}`\n            : barrierID\n          : 0\n        if (stepn !== idx || type !== priority) {\n          if (barrierID) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, barrierID)\n            }\n          } else {\n            pushHeap(stepn, stack, priority)\n          }\n          continue kernelLoop\n        }\n        barrierID && barriers.delete(id)\n      }\n      switch (step.type) {\n        case 'mov': {\n          const data = step.data\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (reg && !reg[data.store.id]) {\n                // if (!page.parent) {\n                if (hasPageReg) {\n                  const pageForRef = getPageForRef(page, data.store.id)\n                  stack.page = page = pageForRef\n                  if (pageForRef) {\n                    reg = pageForRef.reg\n                  } else if (hasScopeReg) {\n                    initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                    reg = forkPage!.reg\n                  } else {\n                    reg = undefined //node.reg\n                  }\n                } else if (hasScopeReg) {\n                  /** StateRef in Scope.reg created only when needed */\n                  initRefInScope(forkPage!, data.store, false, true, data.softRead)\n                } else {\n                  // console.error('should not happen')\n                  /** StateRef should exists at least in Node itself, but it is not found */\n                }\n                // }\n              }\n              // value = getPageRef(page, forkPage, node, data.store.id).current\n              value = readRef(reg ? reg[data.store.id] || data.store : data.store)\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, forkPage, node, data.target).current = value\n              break\n          }\n          break\n        }\n        case 'compute':\n          const data = step.data\n          if (data.fn) {\n            isWatch = getMeta(node, 'op') === 'watch'\n            isPure = data.pure\n            const computationResult = data.safe\n              ? (0 as any, data.fn)(getValue(stack), local.scope, stack)\n              : tryRun(local, data.fn, stack)\n            if (data.filter) {\n              /**\n               * handled edge case: if step.fn will throw,\n               * tryRun will return null\n               * thereby forcing that branch to stop\n               */\n              skip = !computationResult\n            } else {\n              stack.value = computationResult\n            }\n            isWatch = lastStartedState.isWatch\n            isPure = lastStartedState.isPure\n          }\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      const finalValue = getValue(stack)\n      const forkPage = getForkPage(stack)\n      forEach(node.next, nextNode => {\n        pushFirstHeapItem('child', page, nextNode, stack, finalValue, forkPage)\n      })\n      if (forkPage) {\n        if (getMeta(node, 'needFxCounter'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.fxCount,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'storeChange'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.storeChange,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        if (getMeta(node, 'warnSerialize'))\n          pushFirstHeapItem(\n            'child',\n            page,\n            forkPage.warnSerializeNode,\n            stack,\n            finalValue,\n            forkPage,\n          )\n        const additionalLinks = forkPage.additionalLinks[node.id]\n        if (additionalLinks) {\n          forEach(additionalLinks, nextNode => {\n            pushFirstHeapItem(\n              'child',\n              page,\n              nextNode,\n              stack,\n              finalValue,\n              forkPage,\n            )\n          })\n        }\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\nconst noopParser = (x: any) => x\n\nexport const initRefInScope = (\n  scope: {\n    reg: Record<string, StateRef>\n    sidValuesMap: Record<string, any>\n    sidIdMap: Record<string, string>\n    fromSerialize?: boolean\n  },\n  sourceRef: StateRef,\n  isGetState?: boolean,\n  isKernelCall?: boolean,\n  softRead?: boolean,\n) => {\n  const refsMap = scope.reg\n  const sid = sourceRef.sid\n  const serialize = sourceRef?.meta?.serialize\n  const parser =\n    scope.fromSerialize && serialize !== 'ignore'\n      ? serialize?.read || noopParser\n      : noopParser\n  if (refsMap[sourceRef.id]) return\n  const ref: StateRef = {\n    id: sourceRef.id,\n    current: sourceRef.current,\n    meta: sourceRef.meta,\n  }\n\n  if (sid && sid in scope.sidValuesMap && !(sid in scope.sidIdMap)) {\n    ref.current = parser(scope.sidValuesMap[sid])\n  } else {\n    if (sourceRef.before && !softRead) {\n      let isFresh = false\n      const needToAssign = isGetState || !sourceRef.noInit || isKernelCall\n      forEach(sourceRef.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            if (from || cmd.fn) {\n              if (from) initRefInScope(scope, from, isGetState, isKernelCall)\n              const value = from && refsMap[from.id].current\n              if (needToAssign) {\n                ref.current = cmd.fn ? cmd.fn(value) : value\n              }\n            }\n            break\n          }\n          case 'field': {\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            initRefInScope(scope, cmd.from, isGetState, isKernelCall)\n            if (needToAssign) {\n              const from = refsMap[cmd.from.id]\n              ref.current[cmd.field] = refsMap[from.id].current\n            }\n            break\n          }\n          // case 'closure':\n          //   break\n        }\n      })\n    }\n  }\n  if (sid) scope.sidIdMap[sid] = sourceRef.id\n  refsMap[sourceRef.id] = ref\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, fn: Function, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import type {Store, CommonUnit, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent, getCompositeName} from './getter'\nimport {forIn} from './collection'\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  forIn(objOrArr, unit => {\n    /* inlined max object names constant */\n    if (i < 25) {\n      if (unit != null) {\n        name += comma\n        name += is.unit(unit)\n          ? getCompositeName(unit as CommonUnit | Domain).fullName\n          : (unit as any).toString()\n      }\n      i += 1\n      comma = ', '\n    }\n  })\n  return name + ')'\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  store.shortName = rawName\n  Object.assign(getCompositeName(store), createName(rawName, getParent(store)))\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  const shortName = name\n  if (!parent) {\n    path = name.length === 0 ? [] : [name]\n    fullName = name\n  } else {\n    const composite = getCompositeName(parent)\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      fullName =\n        composite.fullName.length === 0\n          ? name\n          : '' + composite.fullName + '/' + name\n    }\n  }\n  return {shortName, fullName, path}\n}\n","import {forIn} from './collection'\nimport {assertObject, isObject, isVoid} from './is'\n\nexport function processArgsToConfig(\n  arg: any,\n  singleArgument: true,\n): [any, any | void]\nexport function processArgsToConfig(args: any[]): [any[], any | void]\nexport function processArgsToConfig(\n  args: any[],\n  singleArgument?: boolean,\n): [any[], any | void] {\n  const rawConfig = singleArgument ? args : args[0]\n  assertObject(rawConfig)\n  let metadata = rawConfig.or\n  const childConfig = rawConfig.and\n  if (childConfig) {\n    const unwrappedNestedValue = singleArgument ? childConfig : childConfig[0]\n    /**\n     * if there is no \"and\" field then we reached the leaf of the tree\n     * and this is an original user-defined argument\n     *\n     * note that in this case we're returning all arguments, not the only one been unwrapped\n     **/\n    if (!isObject(unwrappedNestedValue) || !('and' in unwrappedNestedValue)) {\n      args = childConfig\n    } else {\n      //@ts-expect-error\n      const nested = processArgsToConfig(childConfig, singleArgument)\n\n      args = nested[0]\n      metadata = {...metadata, ...nested[1]}\n    }\n  }\n  return [args, metadata]\n}\n\n/**\nprocessed fields:\n\n'name',\n'sid',\n'loc',\n'handler',\n'updateFilter',\n'parent',\n'serialize',\n'named',\n'derived',\n*/\nexport const flattenConfig = (part: any, config: Record<string, any> = {}) => {\n  if (isObject(part)) {\n    flattenConfig(part.or, config)\n    forIn(part, (value, field) => {\n      if (!isVoid(value) && field !== 'or' && field !== 'and') {\n        config[field] = value\n      }\n    })\n    flattenConfig(part.and, config)\n  }\n  return config\n}\n","import {readTemplate} from './region'\nimport type {Template, TemplateHandlers} from '../forest/index.h'\n\nexport function applyTemplate<K extends keyof TemplateHandlers>(\n  method: K,\n  ...args: Parameters<TemplateHandlers[K]> extends [Template, ...infer Args]\n    ? Args\n    : never\n): ReturnType<TemplateHandlers[K]> | void {\n  const template = readTemplate()\n  if (template) {\n    const fn = template.handlers[method]\n    // @ts-expect-error\n    if (fn) return fn(template, ...args)\n  }\n}\n","import type {Template} from '../forest/index.h'\nimport type {Store, Event, CommonUnit, Effect, Domain} from './unit.h'\nimport type {Subscriber, Config, Cmd, Kind} from './index.h'\n\nimport {observableSymbol} from './observable'\n\nimport {\n  is,\n  isObject,\n  isFunction,\n  assertObject,\n  assertNodeSet,\n  isVoid,\n} from './is'\nimport {calc, mov, read, userFnCall} from './step'\nimport {createStateRef, readRef, addRefOp} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {\n  launch,\n  currentPage,\n  forkPage,\n  setCurrentPage,\n  initRefInScope,\n  isPure,\n} from './kernel'\n\nimport {createName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getStoreState,\n  getGraph,\n  getParent,\n  setMeta,\n  getMeta,\n} from './getter'\nimport {assert, deprecate} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, STACK, REG_A} from './tag'\nimport {applyTemplate} from './template'\nimport {forEach} from './collection'\nimport {flattenConfig} from './config'\n\nexport const applyParentHook = (\n  source: CommonUnit,\n  target: CommonUnit,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nexport const initUnit = (kind: Kind, unit: any, rawConfig: any) => {\n  const config = flattenConfig(rawConfig)\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  const {sid = null, named = null, domain = null, parent = domain} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n  const meta: Record<string, any> = {\n    op: (unit.kind = kind),\n    name: (unit.shortName = name),\n    sid: (unit.sid = readSidRoot(sid)),\n    named,\n    unitId: (unit.id = id),\n    serialize: config.serialize,\n    derived: config.derived,\n    config,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => {\n    deprecate(false, 'thru', 'js pipe')\n    return fn(unit)\n  }\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => observer.next && observer.next(upd),\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst deriveEvent = (\n  event: Event<any>,\n  op: 'map' | 'filterMap' | 'filter',\n  fn: Function,\n  node: Cmd[],\n) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = (fn as unknown as {fn: Function}).fn\n  }\n  const mapped = createEvent({\n    name: `${event.shortName} → *`,\n    derived: true,\n    and: config,\n  })\n  createLinkNode(event, mapped, node, op, fn)\n  return mapped\n}\n\nfunction callCreate<T>(\n  unit: Event<T> | Effect<T, any, any>,\n  template: Template | null,\n  payload: T,\n  args: any[],\n) {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n  const event = ((payload: Payload, ...args: unknown[]) => {\n    deprecate(\n      !getMeta(event, 'derived'),\n      'call of derived event',\n      'createEvent',\n    )\n    deprecate(!isPure, 'unit call from pure function', 'operators like sample')\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }) as Event<Payload>\n  const template = readTemplate()\n  const finalEvent = Object.assign(event, {\n    graphite: createNode({\n      meta: initUnit(EVENT, event, config),\n      regional: true,\n    }),\n    create(params: Payload, _: any[]) {\n      launch({target: event, params, scope: forkPage!})\n      return params\n    },\n    watch: (fn: (payload: Payload) => any) => watchUnit(event, fn),\n    map: (fn: Function) => deriveEvent(event, MAP, fn, [userFnCall()]),\n    filter: (fn: {fn: Function}) =>\n      //@ts-expect-error\n      deriveEvent(event, FILTER, fn.fn ? fn : fn.fn, [\n        userFnCall(callStack, true),\n      ]),\n    filterMap: (fn: Function) =>\n      deriveEvent(event, 'filterMap', fn, [\n        userFnCall(),\n        calc(value => !isVoid(value), true),\n      ]),\n    prepend(fn: Function) {\n      const contramapped: Event<any> = createEvent('* → ' + event.shortName, {\n        parent: getParent(event),\n      })\n      applyTemplate('eventPrepend', getGraph(contramapped))\n      createLinkNode(contramapped, event, [userFnCall()], 'prepend', fn)\n      applyParentHook(event, contramapped)\n      return contramapped\n    },\n  })\n  if (config?.domain) {\n    config.domain.hooks.event(finalEvent)\n  }\n  return finalEvent\n}\nfunction on<State>(\n  store: Store<State>,\n  methodName: string,\n  nodeSet: CommonUnit | CommonUnit[],\n  fn: Function,\n) {\n  assertNodeSet(nodeSet, methodName, 'first argument')\n  assert(isFunction(fn), 'second argument should be a function')\n  deprecate(\n    !getMeta(store, 'derived'),\n    `${methodName} in derived store`,\n    `${methodName} in store created via createStore`,\n  )\n  forEach(Array.isArray(nodeSet) ? nodeSet : [nodeSet], trigger => {\n    store.off(trigger)\n    getSubscribers(store).set(\n      trigger,\n      createSubscription(updateStore(trigger, store, 'on', callARegStack, fn)),\n    )\n  })\n  return store\n}\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const config = flattenConfig(props)\n  const plainState = createStateRef(defaultState)\n  const updates = createEvent({named: 'updates', derived: true})\n  applyTemplate('storeBase', plainState)\n  const plainStateId = plainState.id\n  const store = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage) {\n        initRefInScope(forkPage, plainState, true)\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState: (state: State) =>\n      launch({\n        target: store,\n        params: state,\n        defer: true,\n        scope: forkPage!,\n      }),\n    reset(...units: CommonUnit[]) {\n      forEach(units, unit =>\n        on(store, '.reset', unit, () => store.defaultState),\n      )\n      return store\n    },\n    on(nodeSet: CommonUnit | CommonUnit[], fn: Function) {\n      return on(store, '.on', nodeSet, fn)\n    },\n    off(unit: CommonUnit) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: (value: any, prevArg?: any) => any, firstState?: any) {\n      let config\n      if (isObject(fn)) {\n        config = fn\n        fn = (fn as unknown as {fn: (value: any) => any}).fn\n      }\n      deprecate(\n        isVoid(firstState),\n        'second argument of store.map',\n        'updateFilter',\n      )\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (!isVoid(storeState)) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: `${store.shortName} → *`,\n        derived: true,\n        // @ts-expect-error some mismatch in config types\n        and: config,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, callStackAReg, fn)\n      addRefOp(getStoreState(innerStore), {\n        type: MAP,\n        fn,\n        from: plainState,\n      })\n      getStoreState(innerStore).noInit = true\n      applyTemplate('storeMap', plainState, linkNode)\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        if (!applyTemplate('storeWatch', plainState, eventOrFn)) {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      assert(isFunction(fn), 'second argument should be a function')\n      return (eventOrFn as CommonUnit).watch((payload: any) =>\n        fn(store.getState(), payload),\n      )\n    },\n  } as unknown as Store<State>\n  const meta = initUnit(STORE, store, config)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState, fn: updateFilter},\n    node: [\n      calc((upd, _, stack) => {\n        if (stack.scope && !stack.scope.reg[plainState.id]) {\n          stack.b = true\n        }\n        return upd\n      }),\n      read(plainState),\n      calc((upd, _, {a, b}) => !isVoid(upd) && (upd !== a || b), true),\n      updateFilter && userFnCall(callStackAReg, true),\n      mov({from: STACK, target: plainState}),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  const serializeMeta = getMeta(store, 'serialize')\n  const derived = getMeta(store, 'derived')\n  const ignored = serializeMeta === 'ignore'\n  const customSerialize = !serializeMeta || ignored ? false : serializeMeta\n  const sid: string | null = getMeta(store, 'sid')\n  if (sid) {\n    setMeta(store, 'storeChange', true)\n    plainState.sid = sid\n\n    if (customSerialize) {\n      plainState.meta = {\n        ...plainState?.meta,\n        serialize: customSerialize,\n      }\n    }\n  }\n  if (!sid && !ignored && !derived) {\n    setMeta(store, 'warnSerialize', true)\n  }\n  assert(\n    derived || !isVoid(defaultState),\n    \"current state can't be undefined, use null instead\",\n  )\n  own(store, [updates])\n  if (config?.domain) {\n    config.domain.hooks.store(store)\n  }\n\n  if (!derived) {\n    store.reinit = createEvent<void>()\n    store.reset(store.reinit)\n  }\n\n  return store\n}\n\nconst updateStore = (\n  from: CommonUnit,\n  store: Store<any>,\n  op: string,\n  caller: typeof callStackAReg,\n  fn: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const reader = mov({\n    store: storeRef,\n    to: REG_A,\n    priority: 'read',\n  })\n  if (op === MAP) reader.data.softRead = true\n  const node = [reader, userFnCall(caller)]\n  applyTemplate(\n    'storeOnMap',\n    storeRef,\n    node,\n    is.store(from) && getStoreState(from),\n  )\n  return createLinkNode(from, store, node, op, fn)\n}\n","import type {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef, addRefOp} from './stateRef'\nimport {mov, calc, read, userFnCall} from './step'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, setMeta} from './getter'\nimport {is, isFunction, isObject, isVoid} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {assert, deprecate} from './throw'\nimport {readTemplate} from './region'\nimport {forIn} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\nimport {applyTemplate} from './template'\nimport type {Config} from './index.h'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  ;[args, config] = processArgsToConfig(args)\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  let noArraySpread: boolean | void\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      noArraySpread = true\n      const fn = handler\n      handler = (list: any[]) => fn(...list)\n    }\n  }\n  assert(isObject(structStoreShape), 'shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    !noArraySpread,\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst storeCombination = (\n  isArray: boolean,\n  needSpread: boolean,\n  obj: any,\n  config?: Config,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => [...list] : (obj: any) => ({...obj})\n  const defaultState: Record<string, any> = isArray ? [] : {}\n\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  rawShape.noInit = true\n  applyTemplate('combineBase', rawShape, isFresh)\n  const store = createStore(stateNew, {\n    name: unitObjectName(obj),\n    derived: true,\n    and: config,\n  })\n  const storeStateRef = getStoreState(store)\n  storeStateRef.noInit = true\n  setMeta(store, 'isCombine', true)\n  const rawShapeReader = read(rawShape)\n  /**\n   * usual ref reading has very high priority, which leads to data races\n   * ref reading for combine should have same \"barrier\" priority but without batching\n   * (thats why order has no \"barrierID\" field, which assume batching)\n   **/\n  rawShapeReader.order = {priority: 'barrier'}\n  const node = [\n    calc((upd, _, stack) => {\n      if (stack.scope && !stack.scope.reg[rawShape.id]) {\n        stack.c = true\n      }\n      return upd\n    }),\n    rawShapeReader,\n    mov({store: isFresh, to: 'b'}),\n    calc((upd, {key}, reg) => {\n      if (reg.c || upd !== reg.a[key]) {\n        if (needSpread && reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n        return true\n      }\n    }, true),\n    mov({from: REG_A, target: rawShape}),\n    mov({from: VALUE, store: false, target: isFresh}),\n    mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n      priority: BARRIER,\n      batch: true,\n    }),\n    read(rawShape, true),\n    fn && userFnCall(),\n  ]\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      assert(\n        !is.unit(child) && !isVoid(child),\n        `combine expects a store in a field ${key}`,\n      )\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, node, 'combine', fn)\n    linkNode.scope.key = key\n    const childRef = getStoreState(child)\n    addRefOp(rawShape, {type: 'field', field: key, from: childRef})\n    applyTemplate('combineField', childRef, linkNode)\n  })\n\n  store.defaultShape = obj\n  addRefOp(storeStateRef, {\n    type: MAP,\n    from: rawShape,\n    fn,\n  })\n  if (!readTemplate()) {\n    store.defaultState = fn\n      ? (storeStateRef.current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n\nexport function createStoreObject(...args: any[]) {\n  deprecate(false, 'createStoreObject', 'combine')\n  return combine(...args)\n}\n","import type {Defer} from './unit.h'\n\nexport function createDefer(): Defer {\n  const result = {} as Defer\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(() => {})\n  return result\n}\n","import type {Unit, Stack} from './index.h'\nimport type {Effect, Scope} from './unit.h'\nimport {calc, run} from './step'\nimport {getForkPage, getGraph, getMeta, getParent, setMeta} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {assert} from './throw'\nimport {EFFECT} from './tag'\nimport {add, removeItem} from './collection'\nimport {flattenConfig} from './config'\nimport {nextEffectID} from './id'\n\ntype RunnerData<Params, Done, Fail> = {\n  params: Params\n  req: {\n    rs(data: Done): void\n    rj(data: Fail): void\n  }\n  args?: [params: Params, computedParams: any] | [params: Params]\n  handler?: Function\n}\n\nexport function createEffect<Params, Done, Fail = Error>(\n  nameOrConfig: any,\n  maybeConfig?: any,\n): Effect<Params, Done, Fail> {\n  const config = flattenConfig(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  )\n  const instance = createEvent(\n    isFunction(nameOrConfig) ? {handler: nameOrConfig} : nameOrConfig,\n    maybeConfig,\n  ) as unknown as Effect<Params, Done, Fail>\n  const node = getGraph(instance)\n  setMeta(node, 'op', (instance.kind = EFFECT))\n  //@ts-expect-error\n  instance.use = (fn: Function) => {\n    assert(isFunction(fn), '.use argument should be a function')\n    runner.scope.handler = fn\n    return instance\n  }\n  instance.use.getCurrent = () => runner.scope.handler\n  const anyway = (instance.finally = createEvent({\n    named: 'finally',\n    derived: true,\n  }))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({\n      status,\n      params,\n      result,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({\n      status,\n      params,\n      error,\n    }: {\n      status: 'done' | 'fail'\n      params: Params\n      result: Done\n      error: Fail\n    }) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: {result: Done}) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: {error: Fail}) => error,\n  }))\n\n  const runner = createNode({\n    scope: {\n      handlerId: getMeta(node, 'sid'),\n      handler:\n        instance.defaultConfig.handler ||\n        (() => assert(false, `no handler used in ${instance.getType()}`)),\n    },\n    node: [\n      calc(\n        (upd: RunnerData<Params, Done, Fail>, scope_, stack) => {\n          const scope: {handlerId: string; handler: Function} = scope_ as any\n          let handler = scope.handler\n          if (getForkPage(stack)) {\n            const handler_ = getForkPage(stack)!.handlers[scope.handlerId]\n            if (handler_) handler = handler_\n          }\n          upd.handler = handler\n          return upd\n        },\n        false,\n        true,\n      ),\n      calc(\n        (\n          {\n            params,\n            req,\n            handler,\n            args = [params],\n          }: RunnerData<Params, Done, Fail> & {handler: Function},\n          _,\n          stack,\n        ) => {\n          const scopeRef = createScopeRef(stack)\n          const onResolve = onSettled(\n            params,\n            req,\n            true,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const onReject = onSettled(\n            params,\n            req,\n            false,\n            anyway,\n            stack,\n            scopeRef,\n          )\n          const [ok, result] = runFn(handler, onReject, args)\n          if (ok) {\n            if (isObject(result) && isFunction(result.then)) {\n              result.then(onResolve, onReject)\n            } else {\n              onResolve(result)\n            }\n          }\n        },\n        false,\n        true,\n      ),\n    ],\n    meta: {op: 'fx', fx: 'runner'},\n  })\n  node.scope.runner = runner\n  add(\n    node.seq,\n    calc(\n      (params, {runner}, stack) => {\n        const upd: RunnerData<Params, Done, Fail> = getParent(stack)\n          ? {params, req: {rs(data: Done) {}, rj(data: Fail) {}}}\n          : /** empty stack means that this node was launched directly */\n            params\n        if (!stack.meta) {\n          stack.meta = {fxID: nextEffectID()}\n        }\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          scope: getForkPage(stack),\n          meta: stack.meta,\n        })\n        return upd.params\n      },\n      false,\n      true,\n    ),\n  )\n  //@ts-expect-error\n  instance.create = (params: Params) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n    }\n    launch({\n      target: instance,\n      params: payload,\n      scope: forkPage,\n    })\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {\n    serialize: 'ignore',\n  })\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1)\n    .map({\n      // @ts-expect-error\n      fn: x => x,\n      named: 'inFlight',\n    }))\n  setMeta(anyway, 'needFxCounter', 'dec')\n  setMeta(instance, 'needFxCounter', true)\n  const pending = (instance.pending = inFlight.map({\n    //@ts-expect-error\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [anyway, done, fail, doneData, failData, pending, inFlight])\n  if (config?.domain) {\n    config.domain.hooks.effect(instance)\n  }\n  return instance\n}\nexport const runFn = (\n  fn: Function,\n  onReject: (data: any) => void,\n  args: any[],\n): [boolean, any] => {\n  try {\n    return [true, fn(...args)]\n  } catch (err) {\n    onReject(err)\n    return [false, null]\n  }\n}\n\nexport const createScopeRef = (stack: Stack) => {\n  const scope = getForkPage(stack)\n  const scopeRef = {ref: scope}\n  if (scope) add(scope.activeEffects, scopeRef)\n  return scopeRef\n}\n\nexport const onSettled =\n  (\n    params: any,\n    req: {\n      rs(_: any): void\n      rj(_: any): void\n    },\n    ok: boolean,\n    anyway: Unit,\n    stack: Stack,\n    scopeRef: {ref: Scope | void},\n  ) =>\n  (data: any) => {\n    if (scopeRef.ref) removeItem(scopeRef.ref.activeEffects, scopeRef)\n    launch({\n      target: [anyway, sidechain],\n      params: [\n        ok\n          ? {status: 'done', params, result: data}\n          : {status: 'fail', params, error: data},\n        {value: data, fn: ok ? req.rs : req.rj},\n      ],\n      defer: true,\n      // WARN! Will broke forest pages as they arent moved to new scope\n      page: stack.page,\n      scope: scopeRef.ref,\n      meta: stack.meta,\n    })\n  }\nconst sidechain = createNode({\n  node: [run({fn: ({fn, value}) => fn(value)})],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import type {Domain} from './unit.h'\nimport {combine} from './combine'\nimport {createEffect, createScopeRef, onSettled, runFn} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {processArgsToConfig} from './config'\nimport {\n  getGraph,\n  getParent,\n  getStoreState,\n  setMeta,\n  getCompositeName,\n} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {read, calc} from './step'\nimport {launch} from './kernel'\nimport {EFFECT} from './tag'\nimport {createName} from './naming'\n\nexport function attach(config: any) {\n  let injected\n  ;[config, injected] = processArgsToConfig(config, true)\n  let {source, effect, mapParams} = config\n  const attached = createEffect(config, injected)\n  setMeta(attached, 'attached', true)\n  const {runner} = getGraph(attached).scope\n  let runnerSteps\n  const runnerFnStep = calc(\n    (upd, _, stack) => {\n      const {params, req, handler} = upd\n      const anyway = attached.finally\n      const scopeRef = createScopeRef(stack)\n      const rj = onSettled(params, req, false, anyway, stack, scopeRef)\n      const sourceData = stack.a\n      const isEffectHandler = is.effect(handler)\n      let ok = true\n      let computedParams\n      if (mapParams) {\n        ;[ok, computedParams] = runFn(mapParams, rj, [params, sourceData])\n      } else {\n        computedParams = source && isEffectHandler ? sourceData : params\n      }\n      if (ok) {\n        if (isEffectHandler) {\n          launch({\n            target: handler as any,\n            params: {\n              params: computedParams,\n              req: {\n                rs: onSettled(params, req, true, anyway, stack, scopeRef),\n                rj,\n              },\n            },\n            page: stack.page,\n            defer: true,\n            meta: stack.meta,\n          })\n        } else {\n          upd.args = [sourceData, computedParams]\n          return true\n        }\n      }\n    },\n    true,\n    true,\n  )\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(state, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    runnerSteps = [read(getStoreState(state)), runnerFnStep]\n  } else {\n    runnerSteps = [runnerFnStep]\n  }\n  runner.seq.splice(1, 0, ...runnerSteps)\n  attached.use(effect)\n  const parentDomain: Domain | void = getParent(effect)\n  if (parentDomain) {\n    Object.assign(\n      getCompositeName(attached),\n      createName(attached.shortName, parentDomain),\n    )\n    attached.defaultConfig.parent = parentDomain\n  }\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import type {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import type {Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport type {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createNamedEvent,\n  createStore,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {createLinkNode} from './forward'\nimport {add, forEach, forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {calc} from './step'\nimport {flattenConfig} from './config'\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const config = flattenConfig({\n    or: maybeConfig,\n    and: typeof nameOrConfig === 'string' ? {name: nameOrConfig} : nameOrConfig,\n  }) as any\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n    parent: config?.domain || config?.parent,\n  })\n\n  const domain = {\n    history: {},\n    graphite: node,\n    hooks: {},\n  } as Domain\n\n  node.meta = initUnit(DOMAIN, domain, {\n    parent: config?.domain || config?.parent,\n    or: config,\n  })\n\n  forIn(\n    {\n      Event: createEvent,\n      Effect: createEffect,\n      Store: createStore,\n      Domain: createDomain,\n    },\n    (factory, tag) => {\n      const lowerCaseTag = tag.toLowerCase() as\n        | 'event'\n        | 'effect'\n        | 'store'\n        | 'domain'\n\n      const onCreateUnit = createNamedEvent(`on${tag}`)\n      domain.hooks[lowerCaseTag] = onCreateUnit\n\n      const history = new Set<any>()\n      domain.history[`${lowerCaseTag}s`] = history\n\n      onCreateUnit.create = unit => {\n        launch(onCreateUnit, unit)\n        return unit\n      }\n      add(\n        getGraph(onCreateUnit).seq,\n        calc((upd, _, stack) => {\n          stack.scope = null\n          return upd\n        }),\n      )\n      onCreateUnit.watch(unit => {\n        own(domain, [unit])\n        history.add(unit)\n        if (!unit.ownerSet) unit.ownerSet = history\n        if (!getParent(unit)) unit.parent = domain\n      })\n      own(domain, [onCreateUnit])\n\n      domain[`onCreate${tag}`] = (hook: (unit: any) => any) => {\n        forEach(history, hook)\n        return onCreateUnit.watch(hook)\n      }\n      domain[`create${tag}`] = domain[lowerCaseTag] = (\n        nameOrConfig: any,\n        rawConfig?: Config,\n      ) => {\n        const config = flattenConfig({and: rawConfig, or: nameOrConfig})\n        if (config?.domain) {\n          // @ts-expect-error complicated factory type\n          return factory(nameOrConfig, rawConfig)\n        }\n        // @ts-expect-error complicated factory type\n        return onCreateUnit(factory(nameOrConfig, {parent: domain, or: config}))\n      }\n    },\n  )\n\n  const parent = getParent(domain)\n  if (parent) {\n    forIn(domain.hooks, (from: NodeUnit, key) =>\n      createLinkNode(from, parent.hooks[key]),\n    )\n  }\n  if (config?.domain) {\n    config.domain.hooks.domain(domain)\n  }\n  return domain\n}\n","import {observableSymbol} from './observable'\nimport type {Event} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {assertObject} from './is'\nimport {assert} from './throw'\nimport {createSubscription} from './subscription'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  assert(observableItem.subscribe, 'expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = createSubscription(event)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import type {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  units: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  assertNodeSet(units, 'merge', 'first argument')\n  const result = createEvent({\n    name: unitObjectName(units, 'merge'),\n    derived: true,\n    and: config,\n  })\n  createLinkNode(units, result, [], 'merge')\n  return result\n}\n","import type {Cmd, StateRef} from './index.h'\nimport type {CommonUnit, DataCarrier} from './unit.h'\nimport {combine} from './combine'\nimport {mov, userFnCall, read, calc} from './step'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {\n  assertNodeSet,\n  assertTarget,\n  is,\n  isObject,\n  isVoid,\n  isFunction,\n} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createNode} from './createNode'\nimport {assert} from './throw'\nimport {forEach} from './collection'\nimport {SAMPLE, STACK, VALUE} from './tag'\nimport {merge} from './merge'\nimport {applyTemplate} from './template'\nimport {own} from './own'\nimport {createLinkNode} from './forward'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nconst fieldErrorMessage = (method: string, field: string) =>\n  method + `: ${field} should be defined`\n\nexport function validateSampleConfig(config: any, method: string) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      assert(config[field] != null, fieldErrorMessage(method, field))\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any[]) {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let batched = true\n  let filter\n  /** config case */\n  if (\n    isVoid(clock) &&\n    isObject(source) &&\n    validateSampleConfig(source, SAMPLE)\n  ) {\n    clock = source.clock\n    fn = source.fn\n    batched = !source.greedy\n    filter = source.filter\n    /** optional target & name accepted only from config */\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  return createSampling(\n    SAMPLE,\n    clock,\n    source,\n    filter,\n    target,\n    fn,\n    name,\n    metadata,\n    batched,\n    true,\n    false,\n    sid,\n  )\n}\n\nexport const createSampling = (\n  method: string,\n  clock: DataCarrier | DataCarrier[] | void,\n  source: DataCarrier | Array<Store<any>> | Record<string, Store<any>> | void,\n  filter: any,\n  target: DataCarrier | DataCarrier[] | void,\n  fn: any,\n  name: string | undefined,\n  metadata: object | void,\n  batched: boolean,\n  targetMayBeStore: boolean,\n  filterRequired: boolean,\n  sid?: string | undefined,\n) => {\n  const isUpward = !!target\n  assert(\n    !isVoid(source) || !isVoid(clock),\n    fieldErrorMessage(method, 'either source or clock'),\n  )\n  let sourceIsClock = false\n  if (isVoid(source)) {\n    sourceIsClock = true\n  } else if (!is.unit(source)) {\n    source = combine(source)\n  }\n  if (isVoid(clock)) {\n    /** still undefined! */\n    clock = source\n  } else {\n    assertNodeSet(clock, method, 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock as CommonUnit[])\n    }\n  }\n  if (sourceIsClock) {\n    source = clock\n  }\n  // @ts-expect-error\n  if (!metadata && !name) name = source.shortName\n  let filterType: 'none' | 'unit' | 'fn' = 'none'\n  if (filterRequired || filter) {\n    if (is.unit(filter)) {\n      filterType = 'unit'\n    } else {\n      assert(isFunction(filter), '`filter` should be function or unit')\n      filterType = 'fn'\n    }\n  }\n  if (target) {\n    assertNodeSet(target, method, 'target')\n    assertTarget(method, target)\n  } else {\n    if (\n      filterType === 'none' &&\n      targetMayBeStore &&\n      is.store(source) &&\n      is.store(clock)\n    ) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      // @ts-expect-error\n      target = createStore(initialState, {name, sid, or: metadata})\n    } else {\n      target = createEvent({name, derived: true, or: metadata})\n      applyTemplate('sampleTarget', getGraph(target))\n    }\n  }\n  // const targetTemplate =\n  //   isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  const clockState = createStateRef()\n  let filterNodes: Cmd[] = []\n  if (filterType === 'unit') {\n    const [filterRef, hasFilter] = syncSourceState(\n      filter as DataCarrier,\n      target,\n      // @ts-expect-error\n      clock,\n      clockState,\n      method,\n    )\n    filterNodes = [...readAndFilter(hasFilter), ...readAndFilter(filterRef)]\n  }\n  const [sourceRef, hasSource] = syncSourceState(\n    // @ts-expect-error\n    source,\n    target,\n    clock,\n    clockState,\n    method,\n  )\n  const jointNode = createLinkNode(\n    // @ts-expect-error\n    clock,\n    target,\n    [\n      applyTemplate('sampleSourceLoader'),\n      mov({from: STACK, target: clockState}),\n      ...readAndFilter(hasSource),\n      read(sourceRef, true, batched),\n      ...filterNodes,\n      read(clockState),\n      filterType === 'fn' && userFnCall((src, _, {a}) => filter(src, a), true),\n      fn && userFnCall(callStackAReg),\n      applyTemplate('sampleSourceUpward', isUpward),\n    ],\n    method,\n    fn,\n  )\n  // @ts-expect-error\n  own(source, [jointNode])\n  Object.assign(jointNode.meta, metadata, {joint: true})\n  return target\n}\n\nconst readAndFilter = (state: StateRef) => [\n  read(state),\n  calc((upd, scope, {a}) => a, true),\n]\n\nconst syncSourceState = (\n  source: DataCarrier,\n  target: DataCarrier | DataCarrier[],\n  clock: DataCarrier | DataCarrier[],\n  clockState: StateRef,\n  method: string,\n) => {\n  const isSourceStore = is.store(source)\n  const sourceRef = isSourceStore ? getStoreState(source) : createStateRef()\n  const hasSource = createStateRef(isSourceStore)\n  if (!isSourceStore) {\n    createNode({\n      parent: source,\n      node: [\n        mov({from: STACK, target: sourceRef}),\n        mov({from: VALUE, store: true, target: hasSource}),\n      ],\n      family: {owners: [source, target, clock], links: target},\n      meta: {op: method},\n      regional: true,\n    })\n  }\n  applyTemplate('sampleSource', hasSource, sourceRef, clockState)\n  return [sourceRef, hasSource] as const\n}\n","import {processArgsToConfig} from './config'\nimport {validateSampleConfig, createSampling} from './sample'\n\nexport function guard(...args: any[]) {\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  validateSampleConfig(config, 'guard')\n  return createSampling(\n    'guard',\n    config.clock,\n    source,\n    config.filter,\n    config.target,\n    null,\n    config.name,\n    metadata,\n    !config.greedy,\n    false,\n    true,\n  )\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {createLinkNode} from './forward'\nimport {deprecate} from './throw'\n\nexport function restore(obj: any, defaultState: any, config?: any) {\n  if (is.store(obj)) {\n    deprecate(false, 'restore($store)')\n    return obj\n  }\n  if (is.event(obj) || is.effect(obj)) {\n    const domain = getParent(obj)\n    const result = createStore(defaultState, {\n      parent: domain,\n      name: obj.shortName,\n      and: config,\n    })\n    createLinkNode(is.effect(obj) ? obj.doneData : obj, result)\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(\n    obj,\n    (value, key) =>\n      (result[key] = is.store(value) ? value : createStore(value, {name: key})),\n  )\n  return result\n}\n","import type {DataCarrier} from './unit.h'\nimport type {Cmd, Stack} from './index.h'\nimport {is, isFunction, isObject, assertTarget} from './is'\nimport {add, forIn, includes} from './collection'\nimport {addRefOp, createStateRef} from './stateRef'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {compute, userFnCall, calc, read} from './step'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {assert} from './throw'\nimport {createEvent} from './createUnit'\nimport {applyTemplate} from './template'\nimport {createSampling} from './sample'\n\nconst launchCase = (\n  scopeTargets: Record<string, DataCarrier>,\n  field: string,\n  data: any,\n  stack: Stack,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]) {\n  const METHOD = 'split'\n  let targets: Record<string, DataCarrier>\n  let clock: void | DataCarrier | DataCarrier[]\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const configForm = !match\n  if (configForm) {\n    targets = source.cases\n    match = source.match\n    clock = source.clock\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  assert(is.unit(source), 'source must be a unit')\n  if (!targets!) targets = {}\n  if (!configForm) {\n    assert(matchIsShape, 'match should be an object')\n    forIn(\n      match,\n      (_, key) =>\n        (targets[key] = createEvent({\n          derived: true,\n          and: metadata,\n        })),\n    )\n    targets.__ = createEvent({derived: true, and: metadata})\n  } else {\n    forIn(targets, (target, field) =>\n      assertTarget(METHOD, target, `cases.${field}`),\n    )\n  }\n  const owners = new Set(\n    ([] as DataCarrier[]).concat(source, clock || [], Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && read(getStoreState(match), false, true),\n      compute({\n        safe: matchIsUnit,\n        filter: true,\n        pure: !matchIsUnit,\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        add(units, key)\n        // @ts-expect-error\n        owners.add(storeOrFn)\n        const updater = createLinkNode(\n          storeOrFn,\n          [],\n          [read(lastValues), calc((upd, _, {a}) => (a[key] = upd))],\n        )\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          addRefOp(lastValues, {from: storeRef, field: key, type: 'field'})\n          applyTemplate('splitMatchStore', storeRef, updater)\n        }\n      }\n    })\n    if (needBarrier!) {\n      applyTemplate('splitBase', lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && read(lastValues, false, true),\n      userFnCall((data, scopeTargets, stack) => {\n        for (let i = 0; i < caseNames.length; i++) {\n          const caseName = caseNames[i]\n          const caseValue = includes(units, caseName)\n            ? stack.a[caseName]\n            : match[caseName](data)\n          if (caseValue) {\n            launchCase(scopeTargets, caseName, data, stack)\n            return\n          }\n        }\n        launchCase(scopeTargets, '__', data, stack)\n      }, true),\n    ]\n  } else {\n    assert(false, 'expect match to be unit, function or object')\n  }\n  const splitterNode = createNode({\n    meta: {op: METHOD},\n    parent: clock ? [] : source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {owners: Array.from(owners)},\n    regional: true,\n  })\n  if (clock) {\n    createSampling(\n      METHOD,\n      clock,\n      source,\n      null,\n      splitterNode,\n      null,\n      METHOD,\n      metadata,\n      /* non-batched */\n      false,\n      false,\n      false,\n    )\n  }\n  if (!configForm) return targets\n}\n","import {add} from '../collection'\nimport {createDefer} from '../defer'\nimport {is} from '../is'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope, Event, Effect, DataCarrier, SettledDefer} from '../unit.h'\n\nexport function allSettled<T>(\n  start: Event<T> | Effect<T, any, any> | Scope,\n  //@ts-expect-error its optional in correct cases\n  {scope, params: ctx}: {scope: Scope; params?: unknown} = {},\n) {\n  if (!is.unit(start))\n    return Promise.reject(new Error('first argument should be unit'))\n  if (\n    !is.effect(start) &&\n    !is.event(start) &&\n    !is.store(start) &&\n    !is.scope(start)\n  )\n    return Promise.reject(\n      new Error(\n        'first argument accepts only effects, events, stores or scopes',\n      ),\n    )\n  /** duplicated check because of ts validation */\n  if (is.scope(start)) {\n    scope = start\n  }\n  const defer = createDefer() as SettledDefer\n  defer.parentFork = forkPage\n  const {fxCount} = scope\n  add(fxCount.scope.defers, defer)\n\n  const launchUnits: DataCarrier[] = []\n  const launchParams: Array<{params: unknown; req: unknown} | null> = []\n  if (!is.scope(start)) {\n    add(launchUnits, start)\n    add(\n      launchParams,\n      is.effect(start)\n        ? {\n            params: ctx,\n            req: {\n              rs(value: unknown) {\n                defer.value = {status: 'done', value}\n              },\n              rj(value: unknown) {\n                defer.value = {status: 'fail', value}\n              },\n            },\n          }\n        : ctx,\n    )\n  }\n  add(launchUnits, fxCount)\n  add(launchParams, null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    scope,\n  })\n  return defer.req\n}\n","import {getMeta, getOwners, getLinks} from '../getter'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport type {Store, Effect, ValuesMap, HandlersMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, forEach, includes} from '../collection'\nimport {STORE} from '../tag'\n\nexport function traverseStores(\n  root: Node,\n  fn: (node: Node, sid: string) => void,\n) {\n  const list = [] as Node[]\n  ;(function visit(node) {\n    if (includes(list, node)) return\n    add(list, node)\n    if (getMeta(node, 'op') === STORE && getMeta(node, 'sid')) {\n      fn(node, getMeta(node, 'sid'))\n    }\n    forEach(node.next, visit)\n    forEach(getOwners(node), visit)\n    forEach(getLinks(node), visit)\n  })(root)\n}\n\ntype StoreOrEffect = Store<any> | Effect<any, any, any>\n\nexport function normalizeValues(\n  values: ValuesMap | HandlersMap,\n  assertEach?: (key: StoreOrEffect, value: any) => void,\n) {\n  const mapOrRecordValues: Map<StoreOrEffect, any> | Record<string, any> =\n    Array.isArray(values) ? new Map(values as [StoreOrEffect, any][]) : values\n  if (mapOrRecordValues instanceof Map) {\n    const result = {} as Record<string, any>\n    forEach(mapOrRecordValues, (value, key) => {\n      assert(\n        (is.unit as (val: unknown) => val is StoreOrEffect)(key),\n        'Map key should be a unit',\n      )\n      if (assertEach) assertEach(key, value)\n      assert(key.sid, 'unit should have a sid')\n      assert(!(key.sid! in result), 'duplicate sid found')\n      result[key.sid!] = value\n    })\n    return result\n  }\n  return mapOrRecordValues\n}\n","import {is} from '../is'\nimport {assert} from '../throw'\nimport type {Domain, ValuesMap, HandlersMap, Scope} from '../unit.h'\nimport {normalizeValues} from './util'\nimport {createScope} from './createScope'\nimport {forEach} from '../collection'\n\ntype ForkConfig = {\n  values?: ValuesMap\n  handlers?: HandlersMap\n  scope?: Scope\n}\n\nexport function fork(\n  domainOrConfig?: Domain | ForkConfig,\n  optionalConfig?: ForkConfig,\n) {\n  let config: ForkConfig | void = domainOrConfig as any\n  let domain: Domain\n  if (is.domain(domainOrConfig)) {\n    domain = domainOrConfig\n    config = optionalConfig\n  }\n\n  const scope = createScope(domain!)\n\n  if (config) {\n    const oldScope = config.scope\n    if (oldScope) {\n      const activeEffects = oldScope.activeEffects\n      oldScope.activeEffects = []\n      scope.activeEffects = activeEffects\n      forEach(activeEffects, scopeRef => (scopeRef.ref = scope))\n    }\n    if (config.values) {\n      const valuesSidMap = normalizeValues(config.values, unit =>\n        assert(is.store(unit), 'Values map can contain only stores as keys'),\n      )\n      Object.assign(scope.sidValuesMap, valuesSidMap)\n      scope.fromSerialize =\n        !Array.isArray(config.values) && !(config.values instanceof Map)\n    }\n    if (config.handlers) {\n      scope.handlers = normalizeValues(config.handlers, unit =>\n        assert(\n          is.effect(unit),\n          `Handlers map can contain only effects as keys`,\n        ),\n      )\n    }\n  }\n  return scope\n}\n","import {getForkPage, getGraph, getMeta, getParent} from '../getter'\nimport {setForkPage, getPageRef, currentPage} from '../kernel'\nimport {createNode} from '../createNode'\nimport {calc, compute} from '../step'\nimport type {Domain, Scope, SettledDefer, Store} from '../unit.h'\nimport type {StateRef} from '../index.h'\nimport {forEach} from '../collection'\nimport {DOMAIN, SAMPLER, SCOPE} from '../tag'\n\nexport function createScope(unit?: Domain): Scope {\n  const forkInFlightCounter = createNode({\n    scope: {\n      defers: [],\n      inFlight: 0,\n      fxID: 0,\n    },\n    node: [\n      calc((_, scope, stack) => {\n        if (!getParent(stack)) {\n          scope.fxID += 1\n          return\n        }\n        if (getMeta(getParent(stack).node, 'needFxCounter') === 'dec') {\n          scope.inFlight -= 1\n        } else {\n          scope.inFlight += 1\n          scope.fxID += 1\n        }\n      }),\n      compute({priority: SAMPLER, batch: true}),\n      calc(\n        (\n          _,\n          scope: {\n            inFlight: number\n            fxID: number\n            defers: SettledDefer[]\n          },\n        ) => {\n          const {defers, fxID} = scope\n          if (scope.inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), defer => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n        false,\n        true,\n      ),\n    ],\n  })\n  const page = {} as Record<string, StateRef>\n  const storeChange = createNode({\n    node: [\n      calc((value, __, stack) => {\n        const storeStack = getParent(stack)\n        if (storeStack) {\n          const storeNode = storeStack.node\n          if (\n            !getMeta(storeNode, 'isCombine') ||\n            (getParent(storeStack) &&\n              getMeta(getParent(storeStack).node, 'op') !== 'combine')\n          ) {\n            const forkPage = getForkPage(stack)!\n            const id = storeNode.scope.state.id\n            const sid = getMeta(storeNode, 'sid')\n            forkPage.sidIdMap[sid] = id\n            forkPage.sidValuesMap[sid] = value\n\n            const serialize = getMeta(storeNode, 'serialize')\n            if (serialize) {\n              if (serialize === 'ignore') {\n                forkPage.sidSerializeSettings.set(sid, {ignore: true})\n              } else {\n                forkPage.sidSerializeSettings.set(sid, {\n                  ignore: false,\n                  write: serialize.write,\n                })\n              }\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const warnSerializeNode = createNode({\n    node: [\n      calc((_, __, stack) => {\n        const forkPage = getForkPage(stack)\n        if (forkPage) {\n          const storeStack = getParent(stack)\n          if (storeStack) {\n            const storeNode = storeStack.node\n            if (\n              !getMeta(storeNode, 'isCombine') ||\n              (getParent(storeStack) &&\n                getMeta(getParent(storeStack).node, 'op') !== 'combine')\n            ) {\n              forkPage.warnSerialize = true\n            }\n          }\n        }\n      }),\n    ],\n  })\n  const resultScope: Scope = {\n    cloneOf: unit,\n    reg: page,\n    sidValuesMap: {},\n    sidIdMap: {},\n    sidSerializeSettings: new Map(),\n    getState(store: StateRef | Store<any>) {\n      if ('current' in store) {\n        return getPageRef(currentPage, resultScope, null, store).current\n      }\n      const node = getGraph(store)\n      return getPageRef(currentPage, resultScope, node, node.scope.state, true)\n        .current\n    },\n    kind: SCOPE,\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, storeChange, warnSerializeNode],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n    additionalLinks: {},\n    handlers: {},\n    fxCount: forkInFlightCounter,\n    storeChange,\n    warnSerializeNode,\n    activeEffects: [],\n  }\n  return resultScope\n}\n","import {is, isObject} from '../is'\nimport {assert} from '../throw'\nimport {launch} from '../kernel'\nimport type {Domain, Scope, ValuesMap} from '../unit.h'\nimport type {Node} from '../index.h'\nimport {add, includes} from '../collection'\nimport {normalizeValues, traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain | Scope, {values}: {values: ValuesMap}) {\n  assert(isObject(values), 'values property should be an object')\n  const normalizedValues = normalizeValues(values)\n  const valuesSidList = Object.getOwnPropertyNames(normalizedValues)\n  const storeNodes: Node[] = []\n  const storeValues: any[] = []\n  let forkPage: Scope\n  let traverseTarget: Node\n  let needToAssign: true | void\n  if (is.scope(domain)) {\n    forkPage = domain\n    needToAssign = true\n    assert(forkPage.cloneOf, 'scope should be created from domain')\n    traverseTarget = getGraph(forkPage.cloneOf)\n  } else if (is.domain(domain)) {\n    traverseTarget = getGraph(domain)\n  } else {\n    assert(false, 'first argument of hydrate should be domain or scope')\n  }\n  traverseStores(traverseTarget!, (node, sid) => {\n    // forkPage.sidIdMap[sid] = node.scope.state.id\n    if (includes(valuesSidList, sid)) {\n      add(storeNodes, node)\n      const serializer = getMeta(node, 'serialize')\n      if (serializer && serializer !== 'ignore') {\n        normalizedValues[sid] = serializer.read(normalizedValues[sid])\n      }\n      add(storeValues, normalizedValues[sid])\n    }\n  })\n  launch({\n    target: storeNodes,\n    params: storeValues,\n    scope: forkPage!,\n  })\n  if (needToAssign) {\n    Object.assign(forkPage!.sidValuesMap, normalizedValues)\n  }\n}\n","import {createDefer} from '../defer'\nimport {is} from '../is'\nimport {assert} from '../throw'\nimport {launch, forkPage} from '../kernel'\nimport type {Scope} from '../unit.h'\nimport type {Unit} from '../index.h'\n\n/** bind event to scope */\nexport function scopeBind(\n  unit: Unit,\n  {scope, safe}: {scope?: Scope; safe?: true} = {},\n) {\n  assert(\n    scope || forkPage || safe,\n    'scopeBind cannot be called outside of forked .watch',\n  )\n  const savedForkPage = scope || forkPage!\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: unit,\n          params: {\n            params,\n            req,\n          },\n          scope: savedForkPage,\n        })\n        return req.req\n      }\n    : (params: any) => {\n        launch({target: unit, params, scope: savedForkPage})\n        return params\n      }\n}\n","import type {Scope, Store} from '../unit.h'\nimport {forIn, includes} from '../collection'\nimport {assert} from '../throw'\nimport {traverseStores} from './util'\nimport {getGraph, getMeta} from '../getter'\n\nconst noopSerializer = (x: any) => x\n/**\n serialize state on server\n */\nexport function serialize(\n  scope: Scope,\n  config: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  if (scope.warnSerialize) {\n    console.error(\n      'There is a store without sid in this scope, its value is omitted',\n    )\n  }\n  const ignoredStores = config.ignore ? config.ignore.map(({sid}) => sid) : []\n  const result = {} as Record<string, any>\n  forIn(scope.sidValuesMap, (value, sid) => {\n    if (includes(ignoredStores, sid)) return\n    const id = scope.sidIdMap[sid]\n    const serializeSettings = scope.sidSerializeSettings.get(sid) ?? {\n      ignore: false,\n      write: noopSerializer,\n    }\n    if (serializeSettings.ignore) return\n    const serializer = serializeSettings.write\n    // if (!scope.changedStores.has(id)) return\n    if (id && id in scope.reg) {\n      result[sid] = serializer(scope.reg[id].current)\n    } else {\n      result[sid] = serializer(value)\n    }\n  })\n  if ('onlyChanges' in config && !config.onlyChanges) {\n    assert(scope.cloneOf, 'scope should be created from domain')\n    traverseStores(getGraph(scope.cloneOf), (node, sid) => {\n      if (\n        !(sid in result) &&\n        !includes(ignoredStores, sid) &&\n        !getMeta(node, 'isCombine') &&\n        getMeta(node, 'serialize') !== 'ignore'\n      )\n        result[sid] = scope.getState(node as any)\n    })\n  }\n  return result\n}\n","import {clearNode} from './clearNode'\nimport {createNode} from './createNode'\nimport type {Node, Subscription, Unit} from './index.h'\nimport {step} from './step'\nimport {Scope} from './unit.h'\n\nexport function createWatch<T>({\n  unit,\n  fn,\n  scope,\n}: {\n  unit: Unit<T>\n  fn: (value: T) => any\n  scope?: Scope\n}): Subscription {\n  const seq = [step.run({fn: value => fn(value)})]\n  if (scope) {\n    const node = createNode({node: seq})\n    const id = (unit as any).graphite.id\n    const scopeLinks: {[_: string]: Node[]} = (scope as any).additionalLinks\n    const links = scopeLinks[id] || []\n    scopeLinks[id] = links\n    links.push(node)\n    return createSubscription(() => {\n      const idx = links.indexOf(node)\n      if (idx !== -1) links.splice(idx, 1)\n      clearNode(node)\n    })\n  } else {\n    const node = createNode({\n      node: seq,\n      parent: [unit],\n      family: {owners: unit},\n    })\n    return createSubscription(() => {\n      clearNode(node)\n    })\n  }\n}\n\nfunction createSubscription(callback: () => void): Subscription {\n  const subscription: Subscription = () => callback()\n  subscription.unsubscribe = () => callback()\n\n  return subscription\n}\n","export const observableSymbol =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import type {Node, StateRef, NodeUnit} from './index.h'\nimport type {Scope, Store, CommonUnit, Domain} from './unit.h'\n\nexport const getGraph = (graph: NodeUnit): Node =>\n  (graph as {graphite: Node}).graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: Store<any>): StateRef => store.stateRef\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: Store<any>) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any): Scope | void => val.scope\nexport const getMeta = (unit: NodeUnit, field: string) =>\n  getGraph(unit).meta[field]\nexport const setMeta = (unit: NodeUnit, field: string, value: unknown) =>\n  (getGraph(unit).meta[field] = value)\nexport const getCompositeName = (unit: CommonUnit | Domain) =>\n  unit.compositeName\n","import type {Kind, Unit} from './index.h'\nimport type {Domain, Effect, Event, Scope, Store} from './unit.h'\nimport {DOMAIN, STORE, EVENT, EFFECT, SCOPE} from './tag'\nimport {isObject, isFunction} from './is'\nimport {getMeta} from './getter'\n\nexport const unit = (obj: unknown): obj is Unit<any> =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: Kind) => (obj: unknown) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE) as (value: unknown) => value is Store<unknown>\nexport const event = is(EVENT) as (value: unknown) => value is Event<unknown>\nexport const effect = is(EFFECT) as (\n  value: unknown,\n) => value is Effect<unknown, unknown, unknown>\nexport const domain = is(DOMAIN) as (value: unknown) => value is Domain\nexport const scope = is(SCOPE) as (value: unknown) => value is Scope\nexport const attached = (unit: unknown) =>\n  effect(unit) && getMeta(unit, 'attached') === true\n","const idCount = () => {\n  let id = 0\n  return () => `${++id}`\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\nexport const nextEffectID = idCount()\n","import type {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\nimport {add, forEach} from './collection'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  forEach(links, _link => {\n    const link = getGraph(_link)\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    add(getOwners(link), owner)\n    add(getLinks(owner), link)\n  })\n}\n","export * as is from './validate'\nimport {forEach} from './collection'\nimport {assert, deprecate} from './throw'\nimport {arrifyNodes} from './createNode'\nimport type {NodeUnit} from './index.h'\nimport type {DataCarrier} from './unit.h'\nimport {getMeta} from './getter'\n\nexport const isObject = (value: unknown): value is Record<any, any> =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: unknown): value is Function =>\n  typeof value === 'function'\n\nexport const isVoid = (value: unknown): value is void => value === undefined\n\nexport const assertObject = (value: unknown) =>\n  assert(\n    isObject(value) || isFunction(value),\n    'expect first argument be an object',\n  ) // or function\n\nconst assertNodeSetItem = (\n  value: unknown,\n  method: string,\n  valueName: string,\n  reason: string,\n): asserts value is DataCarrier =>\n  assert(\n    !(\n      (!isObject(value) && !isFunction(value)) ||\n      (!('family' in value) && !('graphite' in value))\n    ),\n    `${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`,\n  )\n\nexport const assertNodeSet = (\n  value: unknown,\n  method: string,\n  valueName: string,\n) => {\n  if (Array.isArray(value)) {\n    forEach(value, (item, i) =>\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, ''),\n    )\n  } else {\n    //@ts-expect-error some ts assertion edge case\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n\nexport const assertTarget = (\n  method: string,\n  target: NodeUnit | NodeUnit[],\n  targetField: string = 'target',\n) =>\n  forEach(arrifyNodes(target), item =>\n    deprecate(\n      !getMeta(item, 'derived'),\n      `${method}: derived unit in \"${targetField}\"`,\n      `createEvent/createStore`,\n    ),\n  )\n","import type {Stack} from './index.h'\n\nexport const callStackAReg = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(stack, a)\nexport const callARegStack = (\n  stack: any,\n  {fn}: {[key: string]: any},\n  {a}: Stack,\n) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: {[key: string]: any}, _: Stack) =>\n  fn(stack)\n","import type {\n  StateRef,\n  Compute,\n  MovValueToRegister,\n  MovValueToStore,\n  MovStoreToRegister,\n  MovStoreToStore,\n  MovRegisterToStore,\n  Stack,\n} from './index.h'\nimport {nextStepID} from './id'\nimport {EFFECT, REG_A, SAMPLER, STACK, STORE} from './tag'\nimport type {BarrierPriorityTag} from './kernel'\nimport {callStack} from './caller'\n\nconst cmd = <Type extends 'compute' | 'mov'>(\n  type: Type,\n  data: any,\n  priority?: BarrierPriorityTag | false,\n  batch?: boolean,\n) => {\n  const result: {\n    id: string\n    type: Type\n    data: any\n    order?: {\n      priority: BarrierPriorityTag\n      barrierID?: number\n    }\n  } = {\n    id: nextStepID(),\n    type,\n    data,\n  }\n  if (priority) {\n    result.order = {priority}\n    if (batch) result.order.barrierID = ++nextBarrierID\n  }\n  return result\n}\n\nlet nextBarrierID = 0\n\nexport const mov: {\n  <T>(data: {\n    from: 'value'\n    store: T\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToStore<T>\n  <T>(data: {\n    from: 'value'\n    to: 'stack' | 'a' | 'b'\n    store: T\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovValueToRegister<T>\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    from: 'a' | 'b' | 'stack'\n    to: 'a' | 'b' | 'stack'\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovRegisterToStore\n  (data: {\n    store: StateRef\n    target: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag\n  }): MovStoreToStore\n  (data: {\n    store: StateRef\n    to: 'stack' | 'a' | 'b'\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  (data: {\n    store: StateRef\n    batch?: boolean\n    priority?: BarrierPriorityTag | false\n  }): MovStoreToRegister\n  // (data: {\n  //   from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  //   to?: 'stack' | 'a' | 'b' | 'store'\n  //   store?: StateRef\n  //   target?: StateRef\n  // }): Mov\n} = ({\n  from = STORE,\n  store,\n  target,\n  to = target ? STORE : STACK,\n  batch,\n  priority,\n}: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: StateRef\n  target?: StateRef\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n}) => cmd('mov', {from, store, to, target}, priority, batch)\n\nexport const compute = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>({\n  fn,\n  batch,\n  priority,\n  safe = false,\n  filter = false,\n  pure = false,\n}: {\n  fn?: (data: any, scope: LocalValues, stack: Stack) => any\n  batch?: boolean\n  priority?: BarrierPriorityTag | false\n  safe?: boolean\n  filter?: boolean\n  pure?: boolean\n}): Compute => cmd('compute', {fn, safe, filter, pure}, priority, batch)\n\nexport const filter = ({\n  fn,\n  pure,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n  pure?: boolean\n}) => compute({fn, filter: true, pure})\n\nexport const run = ({\n  fn,\n}: {\n  fn(data: any, scope: {[key: string]: any}, stack: Stack): any\n}) => compute({fn, priority: EFFECT})\n\nexport const calc = <\n  LocalValues extends {[key: string]: any} = {[key: string]: any},\n>(\n  fn: (data: any, scope: LocalValues, stack: Stack) => any,\n  filter?: boolean,\n  isEffect?: boolean,\n) => compute({fn, safe: true, filter, priority: isEffect && EFFECT})\n\n/**\n * `read(ref, true, true)`: **reg.stack** with **sampler** batch\n *\n * `read(ref, true, false)`: **reg.stack** without batch\n *\n * `read(ref, false, true)`: **reg.a** with **sampler** batch\n *\n * `read(ref, false, false)`: **reg.a** without batch\n *\n */\nexport const read = (\n  store: StateRef,\n  toStack?: boolean,\n  samplerPriority?: boolean,\n) =>\n  mov({\n    store,\n    to: toStack ? STACK : REG_A,\n    priority: samplerPriority && SAMPLER,\n    batch: true,\n  })\n\nexport const userFnCall = (\n  fn: (data: any, scope: {[key: string]: any}, stack: Stack) => any = callStack,\n  isFilter?: boolean,\n) => compute({fn, pure: true, filter: isFilter})\n\nexport const step = {mov, compute, filter, run}\n","import type {StateRef, StateRefOp} from './index.h'\nimport {nextStepID} from './id'\nimport {add} from './collection'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n\nexport const addRefOp = (ref: StateRef, op: StateRefOp) => {\n  if (!ref.before) ref.before = []\n  add(ref.before!, op as any)\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers, getMeta} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-expect-error\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && getMeta(targetNode, 'op') !== 'sample') ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        getMeta(currentNode, 'op') !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: Map<any, any> | Set<any>) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-expect-error\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import type {Subscription, NodeUnit} from './index.h'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = () => clearNode(node)\n  result.unsubscribe = result\n  return result\n}\n","import {processArgsToConfig} from './config'\nimport {createNode} from './createNode'\nimport type {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet, assertTarget} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit | NodeUnit[],\n  child: NodeUnit | NodeUnit[],\n  node?: Array<Cmd | false | void | null>,\n  op?: string,\n  scopeFn?: Function,\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope: {fn: scopeFn},\n    meta: {op},\n    family: {owners: [parent, child], links: child},\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  const method = 'forward'\n  const [{from, to}, config] = processArgsToConfig(opts, true)\n  assertNodeSet(from, method, '\"from\"')\n  assertNodeSet(to, method, '\"to\"')\n  assertTarget(method, to, 'to')\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta: {op: method, config},\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {run} from './step'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assert} from './throw'\nimport {isFunction} from './is'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  assert(isFunction(handler), '.watch argument should be a function')\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {owners: unit},\n      regional: true,\n    }),\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}